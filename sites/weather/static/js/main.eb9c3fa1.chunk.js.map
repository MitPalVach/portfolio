{"version":3,"sources":["store/types.ts","store/actions/alertActions.ts","components/Search.tsx","store/actions/weatherActions.ts","components/Weather.tsx","components/Alert.tsx","App.tsx","store/reducers/weatherReducer.ts","store/reducers/alertReducer.ts","store/index.ts","index.tsx"],"names":["GET_WEATHER","SET_LOADING","SET_ERROR","SET_ALERT","setAlert","message","type","payload","Search","title","dispatch","useDispatch","useState","city","setCity","className","onSubmit","e","preventDefault","trim","a","fetch","process","res","ok","json","resData","Error","getWeather","placeholder","style","maxWidth","value","onChange","currentTarget","margin","Weather","data","fahrenheit","main","temp","toFixed","celsius","marginBottom","name","sys","country","alignItems","weather","description","src","icon","alt","humidity","pressure","wind","speed","Alert","onClose","onClick","justifyContent","App","weatherData","useSelector","state","loading","error","alertMsg","alert","initialState","rootReducer","combineReducers","action","store","createStore","composeWithDevTools","applyMiddleware","thunk","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.eb9c3fa1.chunk.js","sourcesContent":["export const GET_WEATHER = 'GET_WEATHER'\nexport const SET_LOADING = 'SET_LOADING'\nexport const SET_ERROR = 'SET_ERROR'\nexport const SET_ALERT = 'SET_ALERT'\n\nexport interface Weather {\n    description: string\n    icon: string\n    id: number\n    main: string\n}\n\nexport interface WeatherData {\n    base: string\n    clouds: {\n        all: number\n    }\n    cod: number\n    coord: {\n        lon: number\n        lat: number\n    }\n    dt: number\n    id: number\n    main: {\n        feels_like: number\n        humidity: number\n        pressure: number\n        temp: number\n        temp_max: number\n        temp_min: number\n    }\n    name: string\n    sys: {\n        country: string\n        id: number\n        sunrise: number\n        sunset: number\n        type: number\n    }\n    timezone: number\n    visibility: number\n    weather: Weather[]\n    wind: {\n        speed: number\n        deg: number\n    }\n}\n\nexport interface WeatherError {\n    cod: string\n    message: string\n}\n\nexport interface WeatherState {\n    data: WeatherData | null\n    loading: boolean\n    error: string\n}\n\ninterface GetWeatherAction {\n    type: typeof GET_WEATHER\n    payload: WeatherData\n}\n\ninterface SetLoadingAction {\n    type: typeof SET_LOADING\n}\n\ninterface SetErrorAction {\n    type: typeof SET_ERROR\n    payload: string\n}\n\nexport type WeatherAction = GetWeatherAction | SetErrorAction | SetLoadingAction\n\nexport interface AlertAction {\n    type: typeof SET_ALERT\n    payload: string\n}\n\nexport interface AlertState {\n    message: string\n}\n\n\n","import {AlertAction, SET_ALERT} from \"../types\";\n\n\nexport const setAlert = (message: string): AlertAction => {\n    return {\n        type: SET_ALERT,\n        payload: message\n    }\n}\n\n\n\n\n\n\n\n\n\n\n\n","import React, {FC, FormEvent, useState} from 'react';\nimport {useDispatch} from \"react-redux\";\nimport {setAlert} from \"../store/actions/alertActions\";\nimport {getWeather, setLoading} from \"../store/actions/weatherActions\";\n\n\ninterface SearchProps {\n    title: string\n}\n\nconst Search: FC<SearchProps> = ({title}) => {\n    const dispatch = useDispatch()\n    const [city, setCity] = useState('')\n\n    const changeHandler = (e: FormEvent<HTMLInputElement>) => {\n        setCity(e.currentTarget.value)\n    }\n    const submitHandler = (e: FormEvent<HTMLFormElement>) => {\n        e.preventDefault()\n\n        if (city.trim() === '') {\n            return dispatch(setAlert('Необходимо ввести название города'))\n        }\n        dispatch(setLoading())\n        dispatch(getWeather(city))\n        setCity('')\n    }\n\n    return (\n        <div className='hero is-light has-text-centered'>\n            <div className='hero-body'>\n                <div className=\"container\">\n                    <h1 className=\"title\">{title}</h1>\n                    <form className=\"py-5\" onSubmit={submitHandler}>\n                        <input type=\"text\"\n                               className='input has-text-centered mb-2'\n                               placeholder='Введите название города'\n                               style={{maxWidth: 300}}\n                               value={city}\n                               onChange={changeHandler}/>\n                        <button className=\"button is-primary is-fullwidth\"\n                                style={{maxWidth: 300, margin: '0 auto'}}>Поиск\n                        </button>\n                    </form>\n                </div>\n            </div>\n        </div>\n    );\n};\n\nexport default Search;","import {ThunkAction} from \"redux-thunk\";\nimport {RootState} from \"../index\";\nimport {GET_WEATHER, SET_ERROR, SET_LOADING, WeatherAction, WeatherData, WeatherError} from \"../types\";\n\n\nexport const getWeather = (city: string): ThunkAction<void, RootState, null, WeatherAction> => {\n    return async dispatch => {\n        try {\n            const res = await fetch(`https://api.openweathermap.org/data/2.5/weather?q=${city}&appid=${process.env.REACT_APP_API_KEY}`)\n            if (!res.ok) {\n                const resData: WeatherError = await res.json()\n                throw new Error(resData.message)\n            }\n            const resData: WeatherData = await res.json()\n            dispatch({\n                type: GET_WEATHER,\n                payload: resData\n            })\n        } catch(err) {\n            dispatch({\n                type: SET_ERROR,\n                payload: 'Произошла ошибка'\n            })\n        }\n    }\n}\n\nexport const setLoading = (): WeatherAction => {\n    return {\n        type: SET_LOADING\n    }\n}\n\nexport const setError = (): WeatherAction => {\n    return {\n        type: SET_ERROR,\n        payload: ''\n    }\n}\n\n\n\n\n\n\n\n\n\n","import React, {FC} from 'react';\nimport {WeatherData} from \"../store/types\";\n\n\ninterface WeatherProps {\n    data: WeatherData\n}\n\nconst Weather: FC<WeatherProps> = ({data}) => {\n    const fahrenheit = (data.main.temp * 1.8 - 459.67).toFixed(2)\n    const celsius = (data.main.temp - 273.15).toFixed(2)\n    return (\n        <section className=\"section\">\n            <div className=\"container\">\n                <h1 className=\"title has-text-centered\" style={{marginBottom: 50}}>{data.name} - {data.sys.country}</h1>\n                <div className=\"level\" style={{alignItems: 'flex-start'}}>\n                    <div className='level-item has-text-centered'>\n                        <div>\n                            <p className=\"heading\">{data.weather[0].description}</p>\n                            <p className=\"title\"><img src={`http://openweathermap.org/img/wn/${data.weather[0].icon}.png`} alt=\"\"/></p>\n                        </div>\n                    </div>\n                    <div className=\"level-item has-text-centered\">\n                        <div>\n                            <p className=\"heading\">температура</p>\n                            <div className='title'>\n                                <p className=\"mb-2\">{data.main.temp}K</p>\n                                <p className=\"mb-2\">{fahrenheit}<sup>&#8457;</sup></p>\n                                <p className=\"mb-2\">{celsius}<sup>&#8451;</sup></p>\n                            </div>\n                        </div>\n                    </div>\n                    <div className=\"level-item has-text-centered\">\n                        <div>\n                            <p className=\"heading\">влажность</p>\n                            <p className=\"title\">{data.main.humidity}</p>\n                        </div>\n                    </div>\n                    <div className=\"level-item has-text-centered\">\n                        <div>\n                            <p className=\"heading\">давление</p>\n                            <p className=\"title\">{data.main.pressure}</p>\n                        </div>\n                    </div>\n                    <div className=\"level-item has-text-centered\">\n                        <div>\n                            <p className=\"heading\">ветер</p>\n                            <p className=\"title\">{data.wind.speed} м/с</p>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        </section>\n\n    );\n};\n\nexport default Weather;","import React, {FC} from 'react';\n\n\ninterface AlertProps {\n    message: string\n    onClose: () => void\n}\n\nconst Alert: FC<AlertProps> = ({message, onClose}) => {\n    return (\n        <div className='modal is-active has-text-centered'>\n            <div className=\"modal-background\" onClick={onClose}></div>\n            <div className=\"modal-card\">\n                <header className='modal-card-head has-background-danger'>\n                    <p className='modal-card-title has-text-white'>{message}</p>\n                </header>\n                <footer className='modal-card-foot' style={{justifyContent: 'center'}}>\n                    <button className=\"button\" onClick={onClose}>Закрыть</button>\n                </footer>\n            </div>\n        </div>\n    );\n};\n\nexport default Alert;","import React, {FC} from 'react';\nimport './App.css';\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {RootState} from \"./store\";\nimport Search from \"./components/Search\";\nimport Weather from \"./components/Weather\";\nimport Alert from \"./components/Alert\";\nimport {setAlert} from \"./store/actions/alertActions\";\nimport {setError} from \"./store/actions/weatherActions\";\n\n\nconst App: FC = () => {\n    const dispatch = useDispatch()\n    const weatherData = useSelector((state: RootState) => state.weather.data)\n    const loading = useSelector((state: RootState) => state.weather.loading)\n    const error = useSelector((state: RootState) => state.weather.error)\n    const alertMsg = useSelector((state: RootState) => state.alert.message)\n\n    return (\n        <div className='has-text-centered'>\n            <Search title='Введите название города'/>\n            {loading ? <h2 className='is-size-3 py-2'>Загрузка...</h2> : weatherData && <Weather data={weatherData}/>}\n\n            {alertMsg && <Alert message={alertMsg} onClose={() => dispatch(setAlert(''))}/>}\n            {error && <Alert message={error} onClose={() => dispatch(setError())}/>}\n\n\n        </div>\n    );\n};\n\nexport default App;","import {GET_WEATHER, SET_ERROR, SET_LOADING, WeatherAction, WeatherState} from \"../types\";\n\nconst initialState: WeatherState = {\n    data: null,\n    loading: false,\n    error: '',\n}\n\nexport default (state = initialState, action: WeatherAction): WeatherState => {\n    switch (action.type) {\n        case GET_WEATHER:\n            return {\n                data: action.payload,\n                loading: false,\n                error: ''\n            }\n        case SET_LOADING:\n            return {\n                ...state,\n                loading: true\n            }\n        case SET_ERROR:\n            return {\n                ...state,\n                error: action.payload,\n                loading: false\n            }\n        default:\n            return state\n    }\n}\n\n\n\n\n","import {AlertAction, AlertState, SET_ALERT} from \"../types\";\n\nconst initialState: AlertState = {\n    message: ''\n}\n\nexport default (state = initialState, action: AlertAction): AlertState => {\n    switch (action.type) {\n        case SET_ALERT:\n            return {\n                message: action.payload\n            }\n        default:\n            return state\n    }\n}\n\n\n\n\n\n\n\n\n\n\n\n","import {createStore, applyMiddleware, combineReducers} from 'redux'\nimport {composeWithDevTools} from 'redux-devtools-extension'\nimport thunk from \"redux-thunk\";\nimport weatherReducer from \"./reducers/weatherReducer\";\nimport alertReducer from \"./reducers/alertReducer\";\n\n\nconst rootReducer = combineReducers({\n    weather: weatherReducer,\n    alert: alertReducer,\n})\n\nconst store = createStore(\n    rootReducer,\n    composeWithDevTools(applyMiddleware(thunk))\n)\n\nexport type RootState = ReturnType<typeof rootReducer>\n\nexport default store","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport {Provider} from \"react-redux\";\nimport store from \"./store\";\nimport '../node_modules/bulma/css/bulma.min.css';\n\n\nReactDOM.render(\n    <React.StrictMode>\n        <Provider store={store}>\n            <App/>\n        </Provider>\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n\n"],"sourceRoot":""}