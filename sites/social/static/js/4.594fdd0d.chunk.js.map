{"version":3,"sources":["components/Profile/ProfileInfo/ProfileInfo.module.css","components/Users/Users.module.css","components/Users/User.tsx","utils/validators.ts","components/Common/FormControls/FormControls.tsx","components/Common/FormControls/FormControls.module.css","components/Profile/MyPosts/MyPosts.module.css","components/Profile/MyPosts/Post/Post.module.css","components/Profile/Profile.module.css","components/Profile/ProfileInfo/ProfileStatus.tsx","components/Profile/ProfileInfo/ProfileDataForm.tsx","components/Profile/ProfileInfo/Contact.tsx","components/Profile/ProfileInfo/ProfileData.tsx","components/Profile/ProfileInfo/ProfileInfo.tsx","components/Profile/MyPosts/Post/Post.tsx","components/Profile/AddPostForm/AddPostForm.tsx","components/Profile/MyPosts/MyPosts.tsx","components/Profile/MyPosts/MyPostsContainer.tsx","components/Profile/Profile.tsx","components/Profile/ProfileContainer.tsx"],"names":["module","exports","userPhoto","User","props","className","styles","usersItems","to","user","id","usersPhoto","alt","src","photos","small","followed","disabled","followingInProgress","includes","onClick","unfollow","follow","name","status","required","value","maxLengthCreator","maxLength","length","Textarea","input","meta","restProps","showError","touched","error","formControl","errorMessage","ProfileStatus","useState","editMode","setEditMode","setStatus","useEffect","statusText","onDoubleClick","onChange","e","currentTarget","onBlur","updateStatus","autoFocus","ProfileDataForm","profile","saveProfile","goToViewMode","formik","useFormik","initialValues","lookingForAJob","lookingForAJobDescription","fullName","contacts","github","vk","facebook","instagram","twitter","website","youtube","mainLink","aboutMe","userId","large","onSubmit","values","handleSubmit","FormGroup","type","profileInfo__item","TextField","label","margin","getFieldProps","FormControlLabel","control","Checkbox","checked","profileInfo__contacts","Object","entries","map","item","profileInfo__contact","Contact","contactTitle","contactValue","ProfileData","isAuth","goToEditMode","profileInfo__items","profileData__changeBtn","key","ProfileInfo","Preloader","profileImg","profileImg__inputPhoto_wrapper","profileImg__inputPhoto","target","files","callbackPhoto","Post","postsItem","postsItem__inner","postsItem__avatar","post","message","postsItem__activity","postsItem__like","likeCount","postsItem__send","maxLength50","reduxForm","form","profileFormWrapper","Field","profileMessages__input","component","placeholder","validate","profileMessages__btn","MyPosts","React","memo","postElements","profilePage","postData","p","addPost","newPostText","posts","MyPostsContainer","connect","state","dispatch","addPostAC","Profile","isOwner","compose","authorizedUserId","auth","getUserProfile","savePhoto","withRouter","useDispatch","match","params","file"],"mappings":"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","file":"static/js/4.594fdd0d.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"profileImg\":\"ProfileInfo_profileImg__3mXT7\",\"profileImg__inputPhoto_wrapper\":\"ProfileInfo_profileImg__inputPhoto_wrapper__xByAx\",\"profileImg__inputPhoto\":\"ProfileInfo_profileImg__inputPhoto__1Osax\",\"profileData__changeBtn\":\"ProfileInfo_profileData__changeBtn__2-ENY\",\"profileInfo__contacts\":\"ProfileInfo_profileInfo__contacts__2rEBN\",\"avatar\":\"ProfileInfo_avatar__3xuFq\",\"avatarImg\":\"ProfileInfo_avatarImg__2izmI\",\"myPosts\":\"ProfileInfo_myPosts__1no8m\",\"myPosts__input\":\"ProfileInfo_myPosts__input__3tJm9\",\"statusText\":\"ProfileInfo_statusText__1KWIZ\",\"profDescr\":\"ProfileInfo_profDescr__2uUcm\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"usersInner\":\"Users_usersInner__2v4Ca\",\"usersWrapper\":\"Users_usersWrapper__2gv8N\",\"users__leftSide\":\"Users_users__leftSide__2K0Yk\",\"usersPhoto\":\"Users_usersPhoto__3osYH\",\"usersBtn\":\"Users_usersBtn__1iOAv\",\"users__rightSide\":\"Users_users__rightSide__2yxXk\",\"pagination\":\"Users_pagination__2Njh9\",\"usersPagination\":\"Users_usersPagination__1qbrf\",\"pages\":\"Users_pages__2ZPtK\",\"selectedPage\":\"Users_selectedPage__J63sh\",\"usersItems\":\"Users_usersItems__3D9Hj\",\"pageBtnDisplayNone\":\"Users_pageBtnDisplayNone__2TZjX\",\"pageBtn\":\"Users_pageBtn__2Wtq-\"};","import React from 'react';\nimport styles from \"./Users.module.css\";\n// import userPhoto from \"./avatar_to_all.png\";\nimport {UserType} from \"../../redux/usersReducer\";\nimport {NavLink} from 'react-router-dom';\nexport const userPhoto = 'https://images.pexels.com/photos/1564839/pexels-photo-1564839.jpeg?auto=compress&cs=tinysrgb&dpr=2&h=750&w=1260'\n\n\ntype UserPropsType = {\n    user: UserType\n    followingInProgress: Array<number>\n    follow: (userId: number) => void\n    unfollow: (userId: number) => void\n}\nconst User = (props: UserPropsType): JSX.Element => {\n\n    return (\n        <div className={styles.usersItems}>\n            <NavLink to={'/profile/' + props.user.id}>\n                <img className={styles.usersPhoto} alt={'user_photo'}\n                     src={props.user.photos.small !== null ? props.user.photos.small : userPhoto}/>\n            </NavLink>\n            <div>\n                {props.user.followed\n                    ? <button disabled={props.followingInProgress.includes(props.user.id)} onClick={() => {\n                        props.unfollow(props.user.id)\n                    }}>Unfollow</button>\n                    : <button disabled={props.followingInProgress.includes(props.user.id)} onClick={() => {\n                        props.follow(props.user.id)\n                    }}>Follow</button>}\n            </div>\n            <span>\n                    <span>\n                        <div>{props.user.name}</div>\n                        <div>{props.user.status}</div>\n                    </span>\n                    <span>\n                        <div>{\"props.location.country\"}</div>\n                        <div>{\"props.location.city\"}</div>\n                    </span>\n                </span>\n        </div>\n    )\n};\n\nexport default User;","export const required = (value: string) => {\n    if (value) return undefined\n\n    return 'Обязательно заполните';\n}\n\nexport const maxLengthCreator = (maxLength: number) => (value: string) => {\n    if (value.length > maxLength) return `Не больше ${maxLength} символов`\n\n    return undefined\n}\n\n\n\n\n\n\n","import React from 'react';\nimport styles from './FormControls.module.css';\nimport {Field, WrappedFieldProps} from \"redux-form\";\n\n\nexport const Textarea = (props: WrappedFieldProps) => {\n    const {input, meta, ...restProps} = props\n    const showError = props.meta.touched && props.meta.error\n    return (\n        <div className={`${styles.formControl} ${showError ? styles.error : ''}`}>\n            <div>\n                <textarea {...props.input} {...restProps}/>\n            </div>\n            {showError && <div className={styles.errorMessage}>{props.meta.error}</div>}\n        </div>\n    );\n};\n\nexport const Input = (props: WrappedFieldProps) => {\n    const {input, meta, ...restProps} = props\n    const showError = props.meta.touched && props.meta.error\n    return (\n        <div className={`${styles.formControl} ${showError ? styles.error : ''}`}>\n            <div>\n                <textarea className={styles.inputWindow} {...props.input} {...restProps}/>\n            </div>\n            {showError && <div className={styles.errorMessage}>{props.meta.error}</div>}\n        </div>\n    );\n};\n\nexport const createField = (placeholder: any, name: any, validators: any, component: any, props: any, text: string = '') => {\n    return <div>\n        <Field placeholder={placeholder}\n               name={name}\n               validate={validators}\n               component={component}\n               {...props}\n        /> {text}\n    </div>\n}\n\n\n\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"formControl\":\"FormControls_formControl__zKx4R\",\"error\":\"FormControls_error__frz7K\",\"inputWindow\":\"FormControls_inputWindow__2O6cV\",\"errorMessage\":\"FormControls_errorMessage__3coxl\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"posts\":\"MyPosts_posts__3tZ1c\",\"myPosts__input_inner\":\"MyPosts_myPosts__input_inner__3ju60\",\"myPosts__input\":\"MyPosts_myPosts__input__3c6Pi\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"postsItem\":\"Post_postsItem__1DHL5\",\"postsItem__inner\":\"Post_postsItem__inner__1-7QK\",\"postsItem__avatar\":\"Post_postsItem__avatar__3N6Bd\",\"postsItem__messages\":\"Post_postsItem__messages__1V62h\",\"postsItem__activity\":\"Post_postsItem__activity__1G8T2\",\"postsItem__like\":\"Post_postsItem__like__3sh5I\",\"postsItem__send\":\"Post_postsItem__send__QVbcU\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"profileFormWrapper\":\"Profile_profileFormWrapper__1TJsL\",\"profileMessages__input\":\"Profile_profileMessages__input__1M3bu\",\"profileMessages__btn\":\"Profile_profileMessages__btn__1SIl3\"};","import React, {ChangeEvent, useEffect, useState} from 'react';\nimport styles from './ProfileInfo.module.css';\n\n\ntype ProfileStatusType = {\n    status: string\n    updateStatus: (status: string) => void\n}\n\nconst ProfileStatus = (props: ProfileStatusType) => {\n    const [editMode, setEditMode] = useState<boolean>(false)\n    const [status, setStatus] = useState<string>(props.status)\n\n    useEffect(() => {\n        setStatus(props.status)\n    }, [props.status])\n\n    const activeMode = () => {\n        setEditMode(true)\n    }\n    const deactivateEditMode = () => {\n        setEditMode(false)\n        props.updateStatus(status)\n    }\n    const onStatusChange = (e: ChangeEvent<HTMLInputElement>) => {\n        setStatus(e.currentTarget.value)\n    }\n\n    return (\n        <div className={styles.statusText}>\n            {!editMode && <div>\n                <b>Статус: </b> <span onDoubleClick={activeMode}>\n                    {status || 'no status'}\n                </span></div>}\n            {editMode &&\n            <input onChange={onStatusChange}\n                   onBlur={deactivateEditMode}\n                   autoFocus={true}\n                   value={status}\n            />}\n        </div>\n    )\n}\n\n\nexport default ProfileStatus","import React, {FC} from 'react';\nimport styles from \"./ProfileInfo.module.css\";\nimport {ProfileInfoResponseType, ProfileUserType} from \"../../../redux/profileReducer\";\nimport FormGroup from '@mui/material/FormGroup';\nimport TextField from '@mui/material/TextField';\nimport Checkbox from '@mui/material/Checkbox';\nimport {useFormik} from \"formik\";\nimport FormControlLabel from \"@mui/material/FormControlLabel\";\n\n\ntype PropsType = {\n    profile: ProfileUserType\n    saveProfile: (profile: ProfileInfoResponseType) => void\n    goToViewMode: () => void\n}\nconst ProfileDataForm: FC<PropsType> = ({profile, saveProfile, goToViewMode}) => {\n    const formik = useFormik({\n        initialValues: {\n            lookingForAJob: profile.profile.lookingForAJob,\n            lookingForAJobDescription: profile.profile.lookingForAJobDescription,\n            fullName: profile.profile.fullName,\n            contacts: {\n                github: profile.profile.contacts.github,\n                vk: profile.profile.contacts.vk,\n                facebook: profile.profile.contacts.facebook,\n                instagram: profile.profile.contacts.instagram,\n                twitter: profile.profile.contacts.twitter,\n                website: profile.profile.contacts.website,\n                youtube: profile.profile.contacts.youtube,\n                mainLink: profile.profile.contacts.mainLink\n            },\n            aboutMe: profile.profile.aboutMe,\n            userId: profile.profile.userId,\n            photos: {small: '', large: ''},\n        },\n        onSubmit: (values: ProfileInfoResponseType) => {\n            saveProfile(values)\n            goToViewMode()\n        },\n    })\n\n    return (\n        <form onSubmit={formik.handleSubmit}>\n            <FormGroup>\n                <div>\n                    <button type={'submit'}>сохранить</button>\n                </div>\n                {/*================*/}\n                <div className={styles.profileInfo__item}>\n                    <TextField label='Имя'\n                               margin=\"normal\"\n                               {...formik.getFieldProps('fullName')}\n                    />\n                </div>\n                {/*================*/}\n                <div className={styles.profileInfo__item}>\n                    <TextField label='Обо мне'\n                               margin=\"normal\"\n                               {...formik.getFieldProps('aboutMe')}\n                    />\n                </div>\n                {/*================*/}\n                <div className={styles.profileInfo__item}>\n                    <TextField label='Мои профессиональные навыки'\n                               margin=\"normal\"\n                               {...formik.getFieldProps('lookingForAJobDescription')}\n                    />\n                </div>\n                {/*================*/}\n                <div className={styles.profileInfo__item}>\n                    <b>Поиск работы: </b>\n                    <FormControlLabel label=''\n                                      control={<Checkbox/>}\n                                      {...formik.getFieldProps('lookingForAJob')}\n                                      checked={formik.values.lookingForAJob}\n                    />\n                </div>\n                {/*================*/}\n                <div className={styles.profileInfo__contacts}>\n                    {Object.entries(profile.profile.contacts).map((item) => {\n                        // return <Contact key={key} contactTitle={key} contactValue={value}/>\n                        return <div key={item[0]} className={styles.profileInfo__contact}>\n                            <TextField key={item[0]}\n                                       label={item}\n                                       margin=\"normal\"\n                                       {...formik.getFieldProps(`contacts.${item[0]}`)}\n                            />\n                        </div>\n                    })}\n                </div>\n            </FormGroup>\n        </form>\n    );\n};\n\nexport default ProfileDataForm;\n\n\n","import React from 'react';\nimport styles from \"./ProfileInfo.module.css\";\n\n\ntype ContactType = {\n    contactTitle: string\n    contactValue: string | null\n}\nconst Contact: React.FC<ContactType> = ({contactTitle, contactValue}) => {\n    return (\n        <div className={styles.profileInfo__contact}>\n            <b>{contactTitle}: </b> {contactValue}\n        </div>\n    );\n};\n\nexport default Contact;","import React, {FC} from 'react';\nimport {ProfileUserType} from \"../../../redux/profileReducer\";\nimport styles from \"./ProfileInfo.module.css\";\nimport Contact from \"./Contact\";\n\n\ntype PropsType = {\n    profile: ProfileUserType\n    goToEditMode: () => void\n    isAuth: boolean\n}\nconst ProfileData: FC<PropsType> = ({profile, isAuth, goToEditMode}) => {\n    return (\n        <div className={styles.profileInfo__items}>\n            {isAuth && <div>\n                <button className={styles.profileData__changeBtn} onClick={goToEditMode}>редактировать данные</button>\n            </div>}\n            <div className={styles.profileInfo__item}>\n                <b>Имя: </b> {profile.profile.fullName}\n            </div>\n            <div className={styles.profileInfo__item}>\n                <b>Обо мне: </b> {profile.profile.aboutMe}\n            </div>\n            <div className={styles.profileInfo__item}>\n                <b>Поиск работы: </b> {profile.profile.lookingForAJob ? 'да' : 'нет'}\n            </div>\n            <div className={styles.profileInfo__item}>\n                <b>Мои профессиональные навыки: </b> {profile.profile.lookingForAJobDescription}\n            </div>\n            <div className={styles.profileInfo__contacts}>\n                {Object.entries(profile.profile.contacts).map(([key, value]) => {\n                    return <Contact key={key} contactTitle={key} contactValue={value}/>\n                })}\n            </div>\n        </div>\n    );\n};\n\nexport default ProfileData;\n\n","import React, {ChangeEvent, useState} from \"react\";\nimport styles from './ProfileInfo.module.css';\nimport Preloader from \"../../Common/Preloader/Preloader\";\nimport ProfileStatus from \"./ProfileStatus\";\nimport {userPhoto} from \"../../Users/User\";\nimport {ProfileUserType, ProfileInfoResponseType} from \"../../../redux/profileReducer\";\nimport ProfileDataForm from \"./ProfileDataForm\";\nimport ProfileData from \"./ProfileData\";\n\n\ntype ProfileInfoType = {\n    profile: ProfileUserType\n    status: string\n    updateStatus: (status: string) => void\n    isOwner: boolean\n    callbackPhoto: (file: File) => void\n    isAuth: boolean\n    saveProfile: (profile: ProfileInfoResponseType) => void\n}\nconst ProfileInfo = (props: ProfileInfoType) => {\n    const [editMode, setEditMode] = useState(false)\n\n\n    const goToEditMode = () => {\n        setEditMode(true)\n    }\n    const goToViewMode = () => {\n        setEditMode(false)\n    }\n    if (!props.profile) {\n        return <Preloader/>\n    }\n    const onMainPhotoSelected = (e: ChangeEvent<HTMLInputElement>) => {\n        if (e.target.files && e.target.files.length) {\n            props.callbackPhoto(e.target.files[0])\n        }\n    }\n\n    return (\n        props.profile.profile.contacts &&\n        <div>\n            <div>\n                <img className={styles.profileImg}\n                     src={props.profile.profile.photos ? props.profile.profile.photos.large : userPhoto}\n                     alt='avatar'/>\n                <div className={styles.profileImg__inputPhoto_wrapper}>\n                    {props.isAuth &&\n                    <input className={styles.profileImg__inputPhoto}\n                           type={'file'}\n                           onChange={onMainPhotoSelected}\n                    />}\n                </div>\n            </div>\n            {editMode\n                ? <ProfileDataForm profile={props.profile}\n                                   saveProfile={props.saveProfile}\n                                   goToViewMode={goToViewMode}\n                />\n                : <ProfileData goToEditMode={goToEditMode}\n                               profile={props.profile}\n                               isAuth={props.isAuth}/>}\n            <ProfileStatus status={props.status} updateStatus={props.updateStatus}/>\n        </div>\n    )\n}\n\nexport default ProfileInfo;","import React from \"react\";\nimport styles from './Post.module.css';\nimport {PostDataType} from \"../../../../redux/store\";\nconst avatar_to_all = 'https://images.pexels.com/photos/1564839/pexels-photo-1564839.jpeg?auto=compress&cs=tinysrgb&dpr=2&h=750&w=1260'\n\n\ntype PostType = {\n    post: PostDataType\n}\nconst Post: React.FC<PostType> = (props) => {\n    return (\n        <div className={styles.postsItem}>\n            <div className={styles.postsItem__inner}>\n                <img className={styles.postsItem__avatar}\n                     src={avatar_to_all}\n                     alt=\"avatar_to_all\"/>\n                {props.post.message}\n            </div>\n            <div className={styles.postsItem__activity}>\n                <span className={styles.postsItem__like}>{props.post.likeCount} Нравится</span>\n                <span className={styles.postsItem__send}>Написать сообщение</span>\n            </div>\n        </div>\n    )\n}\n\nexport default Post;","import React from \"react\";\nimport {Field, InjectedFormProps, reduxForm} from \"redux-form\";\nimport styles from '../Profile.module.css'\nimport {maxLengthCreator, required} from \"../../../utils/validators\";\nimport {Textarea} from \"../../Common/FormControls/FormControls\";\n\n\nconst maxLength50 = maxLengthCreator(50)\nconst AddPostForm: React.FC<InjectedFormProps> = (props) => {\n    return (\n        <form className={styles.profileFormWrapper} onSubmit={props.handleSubmit}>\n            <div>\n                <Field className={styles.profileMessages__input}\n                       component={Textarea}\n                       name='newPostText'\n                       placeholder={'Введите сообщение'}\n                       validate={[required, maxLength50]}\n                />\n            </div>\n            <div>\n                <button className={styles.profileMessages__btn}>Написать</button>\n            </div>\n        </form>\n    )\n}\n\nexport default reduxForm({form: 'profileAddPostForm'})(AddPostForm)\n","import React from \"react\";\nimport styles from './MyPosts.module.css';\nimport Post from \"./Post/Post\";\nimport {ProfileUserType} from \"../../../redux/profileReducer\";\nimport AddPostForm from \"../AddPostForm/AddPostForm\";\n\n\ntype PropsType = {\n    profilePage: ProfileUserType\n    addPost: (newPostText: string) => void\n}\n\nconst MyPosts = React.memo((props: PropsType) => {\n    let state = props.profilePage\n    let postElements = state.postData.map(p => <Post key={p.id} post={p}/>);\n\n    let onAddPost = (values: any) => {\n        props.addPost(values.newPostText)\n        values.newPostText = ''\n    }\n\n    return (\n        <div>\n            <div>\n                <AddPostForm onSubmit={onAddPost}/>\n            </div>\n            <div className={styles.posts}>\n                {postElements}\n            </div>\n        </div>\n    )\n})\n\n\nexport default MyPosts;\n\n\n// class MyPosts extends React.PureComponent<PropsType> {\n//\n//     // shouldComponentUpdate(nextProps: Readonly<PropsType>, nextState: Readonly<{}>): boolean {\n//     //     return this.props === nextProps || nextState === this.state\n//     // }\n//\n//     render() {\n//         console.log('sd');\n//         let state = this.props.profilePage\n//         let postElements = state.postData.map(p => <Post key={p.id} post={p}/>);\n//         // let postElements = this.props.profilePage.postData.map(p => <Post post={p} key={p.id}/>)\n//\n//         let onAddPost = (values: any) => {\n//             this.props.addPost(values.newPostText)\n//             values.newPostText = ''\n//         }\n//\n//         return (\n//             <div>\n//                 <div>\n//                     <AddPostForm onSubmit={onAddPost}/>\n//                 </div>\n//                 <div className={styles.posts}>\n//                     {postElements}\n//                 </div>\n//             </div>\n//         )\n//     }\n// }\n\n\n","import React from \"react\";\nimport {ActionsTypes, RootStateType} from \"../../../redux/store\";\nimport {addPostAC, ProfileUserType} from \"../../../redux/profileReducer\";\nimport MyPosts from \"./MyPosts\";\nimport {connect} from \"react-redux\";\n\n\ntype PropsType = {\n    profilePage: ProfileUserType\n}\n\nlet mapStateToProps = (state: RootStateType) => {\n    return {\n        postData: state.profilePage.postData,\n        newPostText: state.profilePage.newPostText\n    }\n}\nlet mapDispatchToProps = (dispatch: (action: ActionsTypes) => void) => {\n    return {\n        addPost: (newPostText: string) => {\n            dispatch(addPostAC(newPostText))\n        },\n    }\n}\n\nconst MyPostsContainer: React.FC<PropsType> = connect(mapStateToProps, mapDispatchToProps)(MyPosts)\n\nexport default MyPostsContainer;","import React from \"react\";\nimport ProfileInfo from \"./ProfileInfo/ProfileInfo\";\nimport MyPostsContainer from \"./MyPosts/MyPostsContainer\";\nimport {ProfileInfoResponseType, ProfileUserType} from \"../../redux/profileReducer\";\n\n\ntype PropsType = {\n    profilePage: ProfileUserType\n    getUserProfile: (userId: number) => void\n    // getStatus: () => void\n    updateStatus: (status: string) => void\n    isOwner: boolean\n    callbackPhoto: (file: any) => void\n    isAuth: boolean\n    saveProfile: (profile: ProfileInfoResponseType) => void\n}\nconst Profile: React.FC<PropsType> = ({profilePage, updateStatus, ...props}) => {\n    return (\n        <div>\n            <ProfileInfo profile={profilePage}\n                         status={profilePage.status}\n                         isOwner={props.isOwner}\n                         updateStatus={updateStatus}\n                         callbackPhoto={props.callbackPhoto}\n                         isAuth={props.isAuth}\n                         saveProfile={props.saveProfile}\n            />\n            <MyPostsContainer profilePage={profilePage}/>\n        </div>\n    )\n}\n\nexport default Profile;","import React, {useEffect} from 'react';\nimport Profile from \"./Profile\";\nimport {connect, useDispatch} from \"react-redux\";\nimport {withRouter, RouteComponentProps} from 'react-router-dom';\nimport {\n    getUserProfile,\n    ProfileUserType,\n    savePhoto,\n    saveProfile,\n    setStatus, ProfileInfoResponseType,\n    updateStatus\n} from \"../../redux/profileReducer\";\nimport {AppStateType} from \"../../redux/reduxStore\";\nimport {compose} from \"redux\";\n\n\ntype PathParamsType = {\n    userId: string\n}\ntype MapStatePropsType = {\n    profilePage: ProfileUserType\n    authorizedUserId: number | null\n    isAuth: boolean\n}\ntype MapDispatchPropsType = {\n    getUserProfile: (userId: number) => void\n    // getStatus: () => void\n    updateStatus: (status: string) => void\n    savePhoto: (file: File) => void\n    saveProfile: (profile: ProfileInfoResponseType, userId: number) => void\n}\ntype OwnPropsType = MapStatePropsType & MapDispatchPropsType\ntype PropsType = RouteComponentProps<PathParamsType> & OwnPropsType\n\nconst ProfileContainer = (props: PropsType) => {\n    const dispatch = useDispatch()\n    let userId = +props.match.params.userId;\n    if (!userId) {\n        userId = props.authorizedUserId || 0;\n        // if (!userId) {                               // раскомент\n        //     props.history.push('/login')\n        // }\n    }\n    useEffect(() => {\n        dispatch(getUserProfile(userId))\n        dispatch(setStatus(userId))\n    }, [])\n    const callbackPhoto = (file: any) => {\n        dispatch(savePhoto(file))\n    }\n\n    const saveProfile = (profile: ProfileInfoResponseType) => {\n        props.saveProfile(profile, userId)\n    }\n\n    return (\n        <Profile getUserProfile={props.getUserProfile}\n            // getStatus={props.getStatus}\n                 isOwner={!props.match.params.userId}\n                 updateStatus={props.updateStatus}\n                 profilePage={props.profilePage}\n                 callbackPhoto={callbackPhoto}\n                 isAuth={props.isAuth}\n                 saveProfile={saveProfile}\n        />\n    )\n}\n\nlet mapStateToProps = (state: AppStateType): MapStatePropsType => {\n    return {\n        profilePage: state.profilePage,\n        authorizedUserId: state.auth.userId,\n        isAuth: state.auth.isAuth,\n    }\n}\nexport default compose<React.ComponentType>(\n    connect<MapStatePropsType, MapDispatchPropsType, {}, AppStateType>(mapStateToProps, {\n        getUserProfile,\n        savePhoto,\n        saveProfile,\n        // getStatus,\n        updateStatus\n    }),\n    withRouter,\n)(ProfileContainer)\n\n"],"sourceRoot":""}