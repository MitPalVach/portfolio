{"version":3,"sources":["components/Common/Preloader/Preloader.tsx","components/Navbar/FriendsOnline/FriendsOnline.module.css","redux/profileReducer.ts","redux/dialogsReducer.ts","redux/usersReducer.ts","components/Navbar/Navbar.module.css","api/api.ts","components/Navbar/FriendsOnline/FriendsAvatar/FriendsAvatar.tsx","components/Navbar/FriendsOnline/FriendsOnline.tsx","components/Navbar/FriendsOnline/FriendsOnlineContainer.tsx","components/Navbar/Navbar.tsx","components/News/News.tsx","components/Music/Music.tsx","components/Photo/Photo.tsx","components/Video/Video.tsx","components/Settings/Settings.tsx","components/Header/Header.tsx","redux/authReducer.ts","components/Header/HeaderContainer.tsx","redux/friendsOnlineReducer.ts","redux/appReducer.tsx","redux/reduxStore.ts","components/Login/Login.tsx","components/App/App.tsx","index.tsx","components/Header/Header.module.css","components/App/App.module.css","components/Navbar/FriendsOnline/FriendsAvatar/FriendsAvatar.module.css"],"names":["preloader","Preloader","style","background","src","alt","module","exports","ADD_POST","DELETE_POST","SET_USER_PROFILE","SET_USER_STATUS","SET_UPDATE_STATUS","SAVE_PHOTO_SUCCESS","SAVE_PROFILE","initialState","postData","message","id","v1","likeCount","profile","contacts","status","addPostAC","newPostText","type","setStatus","setUpdateStatus","saveProfileSuccess","getUserProfile","userId","dispatch","a","profileApi","getProfile","response","data","getStatus","updateStatus","resultCode","savePhoto","file","photos","saveProfile","getState","auth","profileReducer","state","action","newPost","SEND_MESSAGE","dialogs","name","friendsAvatar","messages","sendMessageAC","newMessageBody","dialogsReducer","FOLLOW","UNFOLLOW","SET_USERS","SET_CURRENT_PAGE","SET_TOTAL_USERS_COUNT","ON_PAGE_CHANGED","TOGGLE_IS_FETCHING","TOGGLE_IS_FOLLOWING_PROGRESS","users","pageSize","totalUsersCount","currentPage","pageNumber","isFetching","followingInProgress","portionSize","followSuccess","unfollowSuccess","setCurrentPage","onPageChanged","toggleIsFetching","toggleFollowingProgress","getUsers","page","usersApi","items","totalCount","follow","unfollow","usersReducer","map","u","followed","filter","instance","axios","create","withCredentials","baseURL","headers","get","then","delete","post","console","warn","put","photoFile","formData","FormData","append","authApi","me","login","email","password","rememberMe","captcha","logout","securityApi","getCaptcha","FriendsAvatar","props","className","styles","fOnline__inner","fOnline__name","fOnline__ava","ava","FriendsOnline","friendsOnline","sidebar","f","fOnline","fOnline__title","FriendsOnlineContainer","connect","Navbar","navbar","navbarItem","navbarItem__link","activeClassName","active","to","News","Music","Photo","Video","Settings","Header","header","header__inner","href","headerLogo","headerTitle","loginBlock","isAuth","loginLogoutBtn","onClick","SET_USER_DATA","GET_CAPTCHA_URL_SUCCESS","captchaUrl","setAuthUserData","payload","getCaptchaUrlSuccess","getAuthUserData","getCaptchaUrl","url","authReducer","HeaderContainer","this","React","Component","friendsOnlineReducer","SUCCESS_INITIALIZED","initialized","successInitialized","appReducer","rootReducer","combineReducers","profilePage","dialogsPage","usersPage","form","formReducer","app","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","applyMiddleware","thunkMiddleware","Login","useDispatch","isLoggedIn","useSelector","formik","useFormik","initialValues","validate","values","errors","test","length","onSubmit","stopSubmit","_error","resetForm","from","Grid","container","justifyContent","item","FormControl","FormLabel","rel","target","handleSubmit","FormGroup","TextField","label","margin","getFieldProps","touched","color","FormControlLabel","control","Checkbox","checked","Button","variant","ProfileContainer","lazy","DialogsContainer","UsersContainer","App","initializeApp","app__wrapper","content__wrapper","content__inner","fallback","path","component","render","AppContainer","withRouter","promise","Promise","all","SocialApp","basename","process","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.3bfa4d92.chunk.js","sourcesContent":["import React from 'react';\n// import preloader from '../../../images/spinner.svg';\nconst preloader = 'https://media3.giphy.com/media/3oEjI6SIIHBdRxXI40/giphy.gif?cid=790b7611ea276bbbbaa21051bf651344dc6397a74078b299&rid=giphy.gif&ct=g'\n\nconst Preloader = () => {\n    return (\n        <div style={{background: 'white'}}>\n            <img src={preloader} alt={preloader}/>\n        </div>\n    );\n};\n\nexport default Preloader;","// extracted by mini-css-extract-plugin\nmodule.exports = {\"fOnline\":\"FriendsOnline_fOnline__3EvEn\",\"fOnline__title\":\"FriendsOnline_fOnline__title__3WIS0\"};","import {PostDataType} from \"./store\";\nimport {profileApi} from \"../api/api\";\nimport {Dispatch} from \"redux\";\nimport {ThunkDispatch} from \"redux-thunk\";\nimport {AppStateType} from \"./reduxStore\";\nimport {v1} from \"uuid\";\n\n\nconst ADD_POST = \"ADD-POST\"\nconst DELETE_POST = 'DELETE_POST'\nconst SET_USER_PROFILE = 'SET_USER_PROFILE'\nconst SET_USER_STATUS = 'SET_USER_STATUS'\nconst SET_UPDATE_STATUS = 'SET_UPDATE_STATUS'\nconst SAVE_PHOTO_SUCCESS = 'SAVE_PHOTO_SUCCESS'\nconst SAVE_PROFILE = 'SAVE_PROFILE'\n\nexport type ProfileInfoResponseType = {\n    lookingForAJob?: boolean\n    lookingForAJobDescription?: string\n    fullName?: string\n    aboutMe?: string\n    contacts?: ContactsType\n}\nlet initialState = {\n    postData: [\n        {message: 'Hi, how are you?', id: v1(), likeCount: 12},\n        {message: 'What do you think about JS?', id: v1(), likeCount: 22},\n        {message: 'I learn not only JS but and TS!', id: v1(), likeCount: 42},\n        {message: 'Oh, it\\'s cool', id: v1(), likeCount: 23}\n    ],\n    // newPostText: '',\n    profile: {\n        contacts: {}\n    },\n    status: '',\n}\nexport type PhotosType = {\n    small: string\n    large: string\n}\nexport type ProfileUserType = {\n    profile: {\n        userId: number\n        lookingForAJob: boolean\n        lookingForAJobDescription: string\n        fullName: string\n        contacts: ContactsType\n        photos: PhotosType\n        aboutMe: string\n    }\n    postData: Array<PostDataType>\n    newPostText: string\n    status: string\n}\nexport type ContactsType = {\n    // [key: string]: string | null\n    github: string\n    vk: string\n    facebook: string\n    instagram: string\n    twitter: string\n    website: string\n    youtube: string\n    mainLink: string\n}\n\ntype InitStateType = typeof initialState\n\nconst profileReducer = (state: InitStateType = initialState, action: ActionsTypes) => {\n    switch (action.type) {\n        case ADD_POST: {\n            let newPost = {\n                id: v1(),\n                message: action.newPostText,\n                likeCount: 0\n            };\n            return {\n                ...state,\n                postData: [newPost, ...state.postData],\n            }\n        }\n        case DELETE_POST: {\n            return {\n                ...state,\n                // postData: state.postData.filter(p => p.id !== action.postId)\n            }\n        }\n        case SET_USER_STATUS: {\n            return {\n                ...state,\n                status: action.status\n            }\n        }\n        case SET_USER_PROFILE: {\n            return {...state, profile: {...action.profile}}\n        }\n        case SET_UPDATE_STATUS: {\n            return {...state, status: action.status}\n        }\n        case SAVE_PHOTO_SUCCESS: {\n            return {...state, profile: {...state.profile, photos: action.photos}}\n        }\n        case SAVE_PROFILE: {\n            return {...state, profile: {...state.profile, profile: action.profile}}\n        }\n    }\n    return state\n}\n\nexport type ActionsTypes =\n    ReturnType<typeof addPostAC>\n    | ReturnType<typeof setUserProfile>\n    | ReturnType<typeof setStatus>\n    | ReturnType<typeof setUpdateStatus>\n    | ReturnType<typeof deletePost>\n    | savePhotoSuccessAT | saveProfileAT\n\nexport const addPostAC = (newPostText: string) => {\n    return {\n        type: ADD_POST,\n        newPostText\n    } as const\n}\nexport const deletePost = (postId: number) => {\n    return {\n        type: DELETE_POST,\n        postId\n    } as const\n}\nexport const setUserProfile = (profile: ProfileUserType) => {\n    return {\n        type: SET_USER_PROFILE,\n        profile\n    } as const\n}\nexport const setStatus = (status: number) => {\n    return {\n        type: SET_USER_STATUS,\n        status\n    } as const\n}\nexport const setUpdateStatus = (status: string) => {\n    return {\n        type: SET_UPDATE_STATUS,\n        status\n    } as const\n}\nexport const savePhotoSuccess = (photos: PhotosType) => {\n    return {\n        type: SAVE_PHOTO_SUCCESS,\n        photos\n    } as const\n}\nexport const saveProfileSuccess = (profile: ProfileInfoResponseType) => {\n    return {\n        type: SAVE_PROFILE,\n        profile\n    } as const\n}\nexport type savePhotoSuccessAT = ReturnType<typeof savePhotoSuccess>\nexport type saveProfileAT = ReturnType<typeof saveProfileSuccess>\n\n\n// thunk\nexport const getUserProfile = (userId: number) => async (dispatch: ThunkDispatch<AppStateType, unknown, ActionsTypes>) => {\n    let response = await profileApi.getProfile(userId)\n    dispatch(setUserProfile(response.data))\n    await dispatch(getStatus(userId))\n}\nexport const getStatus = (userId: number) => async (dispatch: ThunkDispatch<AppStateType, unknown, ActionsTypes>) => {\n    let response = await profileApi.getStatus(userId)\n    dispatch(setStatus(response.data))\n}\nexport const updateStatus = (status: string) => async (dispatch: Dispatch) => {\n    let response = await profileApi.updateStatus(status)\n    if (response.data.resultCode === 0) {\n        dispatch(setUpdateStatus(status))\n    }\n}\nexport const savePhoto = (file: File) => async (dispatch: Dispatch) => {\n    let response = await profileApi.savePhoto(file)\n    if (response.data.resultCode === 0) {\n        dispatch(savePhotoSuccess(response.data.data.photos))\n    }\n}\nexport const saveProfile = (profile: ProfileInfoResponseType) => async (dispatch: Dispatch, getState: () => AppStateType) => {\n    const userId = getState().auth.userId\n    let response = await profileApi.saveProfile(profile)\n    if (response.data.resultCode === 0) {\n        // @ts-ignore\n        dispatch(getUserProfile(userId))\n        dispatch(saveProfileSuccess(response.data.data.profile))\n    }\n}\n\nexport default profileReducer","import {v1} from \"uuid\";\n\nconst tom = 'https://images.pexels.com/photos/3622695/pexels-photo-3622695.jpeg?auto=compress&cs=tinysrgb&dpr=2&w=500'\nconst alex = 'https://images.pexels.com/photos/3732453/pexels-photo-3732453.jpeg?auto=compress&cs=tinysrgb&dpr=2&w=500'\nconst jane = 'https://images.pexels.com/photos/6474755/pexels-photo-6474755.jpeg?auto=compress&cs=tinysrgb&dpr=2&w=500'\n\n\nconst SEND_MESSAGE = 'SEND-MESSAGE'\n\nexport type MessagesType = {\n    id: string\n    message: string\n}\nexport type DialogsType = {\n    id: string\n    name: string\n    friendsAvatar: string\n}\n\nlet initialState = {\n    dialogs: [\n        {id: v1(), name: 'Tom', friendsAvatar: tom},\n        {id: v1(), name: 'Alex', friendsAvatar: alex},\n        {id: v1(), name: 'Jane', friendsAvatar: jane}\n    ] as Array<DialogsType>,\n    messages: [\n        {id: v1(), message: 'Hello'},\n        {id: v1(), message: 'Hi'},\n        {id: v1(), message: 'Bye'},\n    ] as Array<MessagesType>,\n}\nexport type InitialStateType = typeof initialState\n\nconst dialogsReducer = (state: InitialStateType = initialState, action: ActionsTypes) => {\n\n    switch (action.type) {\n        case SEND_MESSAGE:\n            return {\n                ...state,\n                messages: [{id: v1(), message: action.newMessageBody}, ...state.messages]\n            };\n    }\n    return state\n}\n\nexport type ActionsTypes =\n    ReturnType<typeof sendMessageAC>\n\nexport const sendMessageAC = (newMessageBody: string) => {\n    return {\n        type: SEND_MESSAGE,\n        newMessageBody\n    } as const\n}\n\nexport default dialogsReducer","import {usersApi} from \"../api/api\";\nimport {Dispatch} from \"redux\";\n\nconst FOLLOW = 'FOLLOW'\nconst UNFOLLOW = 'UNFOLLOW'\nconst SET_USERS = 'SET_USERS'\nconst SET_CURRENT_PAGE = 'SET_CURRENT_PAGE'\nconst SET_TOTAL_USERS_COUNT = 'SET_TOTAL_USERS_COUNT'\nconst ON_PAGE_CHANGED = 'ON_PAGE_CHANGED'\nconst TOGGLE_IS_FETCHING = 'TOGGLE_IS_FETCHING';\nconst TOGGLE_IS_FOLLOWING_PROGRESS = 'TOGGLE_IS_FOLLOWING_PROGRESS';\n\n\nexport type LocationType = {\n    city: string\n    country: string\n}\nexport type UserType = {\n    id: number\n    photos: {\n        small: string\n        large: string\n    }\n    followed: boolean\n    name: string\n    status: string\n    location: LocationType\n}\nexport type InitialStateType = {\n    users: Array<UserType>\n    pageSize: number\n    totalUsersCount: number\n    currentPage: number\n    pageNumber: number\n    isFetching: boolean\n    followingInProgress: Array<number>\n    portionSize: number\n}\n\nlet initialState: InitialStateType = {\n    users: [],\n    pageSize: 20,\n    totalUsersCount: 0,\n    currentPage: 1,\n    pageNumber: 1,\n    isFetching: true,\n    followingInProgress: [],\n    portionSize: 10,\n}\nconst usersReducer = (state: InitialStateType = initialState, action: ActionsTypes): InitialStateType => {\n    switch (action.type) {\n        case FOLLOW:\n            return {\n                ...state, users: state.users.map(u => {\n                    if (u.id === action.userId) {\n                        return {...u, followed: true}\n                    }\n                    return u;\n                })\n            }\n        case UNFOLLOW:\n            return {\n                ...state, users: state.users.map(u => {\n                    if (u.id === action.userId) {\n                        return {...u, followed: false}\n                    }\n                    return u;\n                })\n            }\n        case SET_USERS: {\n            return {...state, users: action.users}\n        }\n        case SET_CURRENT_PAGE: {\n            return {...state, currentPage: action.currentPage}\n        }\n        case SET_TOTAL_USERS_COUNT: {\n            return {...state, totalUsersCount: action.totalUsersCount}\n        }\n        case ON_PAGE_CHANGED: {\n            return {...state, pageNumber: action.pageNumber}\n        }\n        case TOGGLE_IS_FETCHING: {\n            return {...state, isFetching: action.isFetching}\n        }\n        case TOGGLE_IS_FOLLOWING_PROGRESS: {\n            return {\n                ...state, followingInProgress: action.isFetching\n                    ? [...state.followingInProgress, action.userId]\n                    : state.followingInProgress.filter((id: number) => id !== action.userId)\n            }\n        }\n        default:\n            return state\n    }\n}\n\nexport type ActionsTypes =\n    ReturnType<typeof followSuccess> | ReturnType<typeof unfollowSuccess>\n    | ReturnType<typeof setUsers> | ReturnType<typeof setCurrentPage>\n    | ReturnType<typeof setTotalUsersCount> | ReturnType<typeof onPageChanged>\n    | ReturnType<typeof toggleIsFetching> | ReturnType<typeof toggleFollowingProgress>\n\nexport const followSuccess = (userId: number) => ({type: FOLLOW, userId} as const)\nexport const unfollowSuccess = (userId: number) => ({type: UNFOLLOW, userId} as const)\nexport const setUsers = (users: Array<UserType>) => ({type: SET_USERS, users} as const)\nexport const setCurrentPage = (currentPage: number) => ({type: SET_CURRENT_PAGE, currentPage} as const)\nexport const setTotalUsersCount = (totalUsersCount: number) => ({\n    type: SET_TOTAL_USERS_COUNT, totalUsersCount\n} as const)\nexport const onPageChanged = (pageNumber: number) => ({type: ON_PAGE_CHANGED, pageNumber} as const)\nexport const toggleIsFetching = (isFetching: boolean) => ({type: TOGGLE_IS_FETCHING, isFetching} as const)\nexport const toggleFollowingProgress = (isFetching: boolean, userId: number) => ({\n    type: TOGGLE_IS_FOLLOWING_PROGRESS,\n    isFetching,\n    userId\n} as const)\n\nexport const getUsers = (page: number, pageSize: number) => async (dispatch: Dispatch) => {\n    dispatch(toggleIsFetching(true))\n    dispatch(setCurrentPage(page))\n    let data = await usersApi.getUsers(page, pageSize)\n    dispatch(toggleIsFetching(false))\n    dispatch(setUsers(data.items))\n    dispatch(setTotalUsersCount(data.totalCount))\n}\n\nexport const follow = (userId: number) => async (dispatch: Dispatch) => {\n    dispatch(toggleFollowingProgress(true, userId))\n    let response = await usersApi.follow(userId)\n    if (response.data.resultCode === 0) {\n        dispatch(followSuccess(userId))\n    }\n    dispatch(toggleFollowingProgress(false, userId))\n}\nexport const unfollow = (userId: number) => async (dispatch: Dispatch) => {\n    dispatch(toggleFollowingProgress(true, userId))\n    let response = await usersApi.unfollow(userId)\n    if (response.data.resultCode === 0) {\n        dispatch(unfollowSuccess(userId))\n    }\n    dispatch(toggleFollowingProgress(false, userId))\n}\n\n// refactor ->\n// const followUnfollowFlow = async (dispatch: Dispatch, userId: number, apiMethod: (userId: number) => void, ac: (userId: number) => void) => {\n//     dispatch(toggleFollowingProgress(true, userId))\n//     let response = await apiMethod(userId)\n//     if (response.data.resultCode === 0) {\n//         dispatch(ac(userId))\n//     }\n//     dispatch(toggleFollowingProgress(false, userId))\n// }\n//\n// export const follow = (userId: number) => async (dispatch: Dispatch) => {\n//     followUnfollowFlow(dispatch, userId, usersApi.follow.bind(usersApi), followSuccess)\n// }\n// export const unfollow = (userId: number) => async (dispatch: Dispatch) => {\n//     followUnfollowFlow(dispatch, userId, usersApi.unfollow.bind(usersApi), unfollowSuccess)\n// }\n\nexport default usersReducer;","// extracted by mini-css-extract-plugin\nmodule.exports = {\"navbar\":\"Navbar_navbar__CLYHD\",\"navbarItem\":\"Navbar_navbarItem__1xOtf\",\"navbarItem__link\":\"Navbar_navbarItem__link__2g1i6\",\"active\":\"Navbar_active__3mbhk\",\"friendsOnline\":\"Navbar_friendsOnline__2Jno3\"};","import axios from \"axios\";\nimport {ProfileInfoResponseType, ProfileUserType} from \"../redux/profileReducer\";\nimport {AuthPropsType} from \"../redux/authReducer\";\n\n\nconst instance = axios.create({\n    withCredentials: true,\n    baseURL: 'https://social-network.samuraijs.com/api/1.0/',\n    headers: {'API-KEY': '411482a7-ac02-48c2-a201-383524308513'},\n})\n\nexport const usersApi = {\n    getUsers(currentPage: number = 1, pageSize: number = 10) {\n        return instance.get(`users?page=${currentPage}&count=${pageSize}`)\n            .then(response => response.data)\n    },\n    unfollow(userId: number) {\n        return instance.delete(`follow/${userId}`\n        )\n    },\n    follow(userId: number) {\n        return instance.post(`follow/${userId}`\n        )\n    },\n    getProfile(userId: number) {\n        console.warn('Obsolete method. Please profileApi object')\n        return profileApi.getProfile(userId)\n    },\n}\n\n// ====\n\nexport const profileApi = {\n    getProfile(userId: number) {\n        return instance.get<ProfileUserType>(`profile/${userId}`)\n    },\n    getStatus(userId: number) {\n        return instance.get(`profile/status/${userId}`)\n    },\n    updateStatus(status: string) {\n        return instance.put(`profile/status/`, {status})\n    },\n    savePhoto(photoFile: File) {     //   загрузка файла фото\n        const formData = new FormData()\n        formData.append('image', photoFile)\n        return instance.put(`profile/photo/`, formData, {\n            headers: {\n                'Content-Type': 'multipart/form-data'\n            }\n        })\n    },\n    saveProfile(profile: ProfileInfoResponseType) {\n        return instance.put(`profile`, profile)\n    },\n}\n\n// ====\n\nexport const authApi = {\n    me() {\n        return instance.get<AuthPropsType>(`auth/me`)\n    },\n    login(email: string, password: string, rememberMe: boolean, captcha: string) {\n        return instance.post<AuthPropsType>(`auth/login`, {email, password, rememberMe, captcha}) // captcha\n    },\n    logout() {\n        return instance.delete<AuthPropsType>(`auth/login`)\n    },\n}\n\n// ====\n\nexport const securityApi = {\n    getCaptcha() {\n        return instance.get(`security/get-captcha-url`)\n    },\n}\n\n\n\n\n","import React from 'react';\nimport styles from './FriendsAvatar.module.css';\n\n\ntype PropsType = {\n    id:number\n    name: string\n    ava:string\n}\nconst FriendsAvatar:React.FC<PropsType> = (props) => {\n    return (\n        <div className={styles.fOnline__inner}>\n            <div className={styles.fOnline__name}>{props.name}</div>\n            <img className={styles.fOnline__ava} src={props.ava} alt=\"\"/>\n        </div>\n    );\n};\n\nexport default FriendsAvatar;","import React from 'react';\nimport styles from './FriendsOnline.module.css';\nimport {FriendsOnlineType} from \"../../../redux/store\";\nimport FriendsAvatar from \"./FriendsAvatar/FriendsAvatar\";\n\n\ntype PropsType ={\n    friendsOnline: FriendsOnlineType\n}\nconst FriendsOnline:React.FC<PropsType> = (props) => {\nlet state = props.friendsOnline\n    let friendsAvatar = state.sidebar.map(f => <FriendsAvatar\n        key={f.id}\n        name={f.name}\n        ava={f.ava}\n        id={f.id}\n    />);\n    return (\n        <div className={styles.fOnline}>\n            <h5 className={styles.fOnline__title}>Друзья онлайн</h5>\n            {friendsAvatar}\n        </div>\n    );\n};\n\nexport default FriendsOnline;\n\n","import React from 'react';\nimport {connect} from \"react-redux\";\nimport FriendsOnline from \"./FriendsOnline\";\nimport {RootStateType} from \"../../../redux/store\";\n\n\nlet mapStateToProps = (state:RootStateType) => {\n    return {\n        friendsOnline: state.friendsOnline\n    }\n}\n\nconst FriendsOnlineContainer: React.FC = connect(mapStateToProps)(FriendsOnline)\n\nexport default FriendsOnlineContainer;\n\n","import styles from './Navbar.module.css';\nimport React from 'react';\nimport {NavLink} from \"react-router-dom\";\nimport FriendsOnlineContainer from \"./FriendsOnline/FriendsOnlineContainer\";\n\n\nconst Navbar:React.FC = () => {\n\n    return (\n        <nav className={styles.navbar}>\n            <div className={styles.navbarItem}>\n                <NavLink className={styles.navbarItem__link} activeClassName={styles.active}\n                   to={\"/profile\"}>\n                    Профиль</NavLink>\n            </div>\n            <div className={styles.navbarItem}>\n                <NavLink className={styles.navbarItem__link} activeClassName={styles.active}\n                   to={\"/dialogs\"} >\n                    Сообщения</NavLink>\n            </div>\n            <div className={styles.navbarItem}>\n                <NavLink className={styles.navbarItem__link} activeClassName={styles.active}\n                   to={\"/users\"} >\n                    Друзья</NavLink>\n            </div>\n            <div className={styles.navbarItem}>\n                <NavLink className={styles.navbarItem__link} activeClassName={styles.active}\n                   to={\"/news\"} >\n                    Новости</NavLink>\n            </div>\n            <div className={styles.navbarItem}>\n                <NavLink className={styles.navbarItem__link} activeClassName={styles.active}\n                   to={\"/music\"} >\n                    Музыка</NavLink>\n            </div>\n            <div className={styles.navbarItem}>\n                <NavLink className={styles.navbarItem__link} activeClassName={styles.active}\n                   to={\"/photo\"} >\n                    Фото</NavLink>\n            </div>\n            <div className={styles.navbarItem}>\n                <NavLink className={styles.navbarItem__link} activeClassName={styles.active}\n                   to={\"/video\"} >\n                    Видео</NavLink>\n            </div>\n            <div className={styles.navbarItem}>\n                <NavLink className={styles.navbarItem__link} activeClassName={styles.active}\n                   to={\"/settings\"} >\n                    Настройки</NavLink>\n            </div>\n            <div className={styles.friendsOnline}>\n\n                <FriendsOnlineContainer />\n            </div>\n        </nav>\n    )\n}\n\nexport default Navbar;\n","import React from \"react\";\n\n\nconst News = () => {\n    return (\n        <div>\n            News\n        </div>\n    )\n}\n\nexport default News;","import React from \"react\";\n\n\nconst Music = () => {\n    return (\n        <div>\n            Music\n        </div>\n    )\n}\n\nexport default Music;","import React from \"react\";\n\n\nconst Photo = () => {\n    return (\n        <div>\n            Photo\n        </div>\n    )\n}\n\nexport default Photo;","import React from \"react\";\n\n\nconst Video = () => {\n    return (\n        <div>\n            Video\n        </div>\n    )\n}\n\nexport default Video;","import React from \"react\";\n\n\nconst Settings = () => {\n    return (\n        <div>\n            Settings\n        </div>\n    )\n}\n\nexport default Settings;","import React from 'react';\nimport {NavLink} from 'react-router-dom';\nimport styles from './Header.module.css'\n\n\ntype PropsType = {\n    isAuth: boolean\n    login: string | null\n    logout: () => void\n}\nconst Header: React.FC<PropsType> = (props) => {\n    return (\n        <header className={styles.header}>\n            <a className={styles.header__inner} href={\"/profile\"}>\n                <img className={styles.headerLogo} src='https://img.icons8.com/ios/452/owl.png'\n                     alt=\"logo\"/>\n            </a>\n            <a className={styles.header__inner} href={\"/profile\"}>\n                <h1 className={styles.headerTitle}>owlbook.com</h1>\n            </a>\n            <div className={styles.loginBlock}>\n                {props.isAuth\n                    ? <div>{props.login} <button className={styles.loginLogoutBtn} onClick={props.logout}>Выйти</button></div>\n                    : <NavLink className={styles.loginLogoutBtn} to={'/login'}>Войти</NavLink>}\n            </div>\n        </header>\n    )\n}\n\nexport default Header;","import {Dispatch} from \"redux\";\nimport {authApi, securityApi} from \"../api/api\";\nimport {stopSubmit} from \"redux-form\";\nimport {RootDispatchType} from \"./reduxStore\";\n\n\nconst SET_USER_DATA = 'auth/SET_USER_DATA';\nconst GET_CAPTCHA_URL_SUCCESS = 'samurai-network/auth/GET_CAPTCHA_URL_SUCCESS';\n\nexport type AuthPropsType = {\n    resultCode: number\n    messages: Array<string>\n    data: {\n        id: number\n        email: string\n        login: string\n    }\n}\nexport type AuthType = {\n    userId: number | null\n    email: string | null\n    login: string | null\n    isAuth: boolean\n    captchaUrl: string | null\n}\n// export type InitialStateType = AuthType\nexport type InitialStateType = typeof initialState\nlet initialState = {\n    userId: null as number | null,\n    email: null as string | null,\n    login: null as string | null,\n    isAuth: false,\n    captchaUrl: null as string | null // if null, then captcha is not required\n}\n\nconst authReducer = (state: InitialStateType = initialState, action: ActionsTypes) => {\n    switch (action.type) {\n        case SET_USER_DATA:\n        case GET_CAPTCHA_URL_SUCCESS:\n            return {\n                ...state,\n                ...action.payload,\n            }\n        default:\n            return state\n    }\n\n}\n\nexport type ActionsTypes = ReturnType<typeof setAuthUserData> | ReturnType<typeof getCaptchaUrlSuccess>\n\nexport const setAuthUserData = (userId: number | null, email: string | null, login: string | null, isAuth: boolean) => {\n    return {\n        type: SET_USER_DATA,\n        payload: {userId, email, login, isAuth}\n    } as const\n}\nexport const getCaptchaUrlSuccess = (captchaUrl: string) => {\n    return {\n        type: GET_CAPTCHA_URL_SUCCESS,\n        payload: {captchaUrl}\n    } as const\n}\nexport const getAuthUserData = () => async (dispatch: Dispatch) => {\n    let response = await authApi.me()\n    if (response.data.resultCode === 0) {\n        let {id, email, login} = response.data.data;\n        dispatch(setAuthUserData(id, email, login, true))\n    }\n}\n\nexport const login = (email: string, password: string, rememberMe: boolean, captchaUrl: string) => async (dispatch: RootDispatchType) => {\n    let response = await authApi.login(email, password, rememberMe, captchaUrl) // captcha\n    if (response.data.resultCode === 0) {\n        dispatch(getAuthUserData())\n    } else if (response.data.resultCode === 10) {\n        dispatch(getCaptchaUrl())\n    } else {\n        let message = response.data.messages.length > 0 ? response.data.messages[0] : 'Ошибка ввода'\n        dispatch(stopSubmit('login', {_error: message}))\n    }\n}\n\nexport const getCaptchaUrl = () => async (dispatch: RootDispatchType) => {\n    const response = await securityApi.getCaptcha()\n    const captchaUrl = response.data.url\n    dispatch(getCaptchaUrlSuccess(captchaUrl))\n}\n\nexport const logout = () => async (dispatch: Dispatch) => {\n    let response = await authApi.logout()\n    if (response.data.resultCode === 0) {\n        dispatch(setAuthUserData(null, null, null, false))\n    }\n}\n\nexport default authReducer\n\n\n\n\n\n\n","import React from \"react\";\nimport Header from \"./Header\";\nimport {connect} from \"react-redux\";\nimport {logout} from \"../../redux/authReducer\";\nimport {AppStateType} from \"../../redux/reduxStore\";\n\n\ntype OwnProps = {}\ntype MapStateToPropsType = {\n    isAuth: boolean\n    login: string | null\n    captchaUrl: string | null\n}\ntype MapDispatchType = {\n    logout: () => void\n}\ntype OwnPropsType = MapStateToPropsType & MapDispatchType\n\nclass HeaderContainer extends React.Component<OwnPropsType> {\n    render() {\n        return <Header {...this.props}/>\n    }\n}\n\nconst mapStateToProps = (state: AppStateType): MapStateToPropsType => {\n    return {\n        isAuth: state.auth.isAuth,\n        login: state.auth.login,\n        captchaUrl: state.auth.captchaUrl,\n    }\n}\nexport default connect<MapStateToPropsType, MapDispatchType, OwnProps, AppStateType>(mapStateToProps, {logout})(HeaderContainer);\n","const ava = 'https://cdn-icons-png.flaticon.com/512/12/12426.png'\n\n\nexport type SidebarType = {\n    id: number\n    name: string\n    ava: string\n}\nexport type InitialStateType = {\n    sidebar: Array<SidebarType>\n}\nlet initialState: InitialStateType = {\n    sidebar: [\n        {id: 1, name: 'Неясыть', ava: ava},\n        {id: 2, name: 'Филин', ava: ava},\n        {id: 3, name: 'Полярная сова', ava: ava}\n    ]\n}\nconst friendsOnlineReducer = (state: InitialStateType = initialState) => {\n    return state\n}\n\nexport default friendsOnlineReducer","import {getAuthUserData} from \"./authReducer\";\nimport {RootDispatchType} from \"./reduxStore\";\n\nconst SUCCESS_INITIALIZED = 'SUCCESS_INITIALIZED';\n\nexport type AppInitialStateType = {\n    initialized: boolean\n}\nexport type ActionsTypes = ReturnType<typeof successInitialized>\n\nlet initialState: AppInitialStateType = {\n    initialized: false,\n}\n\nconst appReducer = (state: AppInitialStateType = initialState, action: ActionsTypes): AppInitialStateType => {\n    switch (action.type) {\n        case SUCCESS_INITIALIZED:\n            return {\n                ...state,\n                initialized: true,\n            }\n        default:\n            return state\n    }\n}\nexport const initializeApp = () => (dispatch: RootDispatchType) => {\n    let promise = dispatch(getAuthUserData())\n    Promise.all([promise])\n        .then(() => {\n            dispatch(successInitialized())\n        })\n}\nexport const successInitialized = () => ({type: SUCCESS_INITIALIZED,} as const)\n\nexport default appReducer\n","import {Action, AnyAction, applyMiddleware, combineReducers, compose, createStore, Dispatch} from \"redux\";\nimport friendsOnlineReducer from \"./friendsOnlineReducer\";\nimport dialogsReducer from \"./dialogsReducer\";\nimport profileReducer from \"./profileReducer\";\nimport usersReducer from \"./usersReducer\";\nimport authReducer from \"./authReducer\";\nimport thunkMiddleware, {ThunkDispatch} from 'redux-thunk';\nimport {reducer as formReducer} from \"redux-form\";\nimport appReducer from \"./appReducer\";\n\n\nexport const rootReducer = combineReducers({\n    profilePage: profileReducer,\n    dialogsPage: dialogsReducer,\n    friendsOnline: friendsOnlineReducer,\n    usersPage: usersReducer,\n    auth: authReducer,\n    form: formReducer,\n    app: appReducer,\n})\n\n\n// @ts-ignore\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\nexport const store = createStore(rootReducer, /* preloadedState, */ composeEnhancers(applyMiddleware(thunkMiddleware)))\n\nexport type AppStateType = ReturnType<typeof rootReducer>\nexport type RootDispatchType = Dispatch<Action<string>> & ThunkDispatch<AppStateType, string, AnyAction>;\n\n// export const store = createStore(rootReducer, applyMiddleware(thunkMiddleware))\n// @ts-ignore\n// window.store = store\n","import React from 'react'\nimport Grid from '@mui/material/Grid';\nimport FormControl from '@mui/material/FormControl';\nimport FormGroup from '@mui/material/FormGroup';\nimport FormLabel from '@mui/material/FormLabel';\nimport TextField from '@mui/material/TextField';\nimport Checkbox from '@mui/material/Checkbox';\nimport FormControlLabel from '@mui/material/FormControlLabel';\nimport Button from '@mui/material/Button';\nimport {useFormik} from \"formik\";\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {Redirect} from \"react-router-dom\";\nimport {login} from \"../../redux/authReducer\";\nimport {AppStateType} from \"../../redux/reduxStore\";\n\n\ntype FormikErrorType = {\n    email?: string\n    password?: string\n    rememberMe?: boolean\n    captchaUrl?: string\n}\n\nexport const Login = () => {\n    const dispatch = useDispatch()\n    const isLoggedIn = useSelector<AppStateType, boolean>((state) => state.auth.isAuth)\n    const captchaUrl = useSelector<AppStateType, string | null>((state) => state.auth.captchaUrl)\n\n    const formik = useFormik({\n        initialValues: {\n            email: '',\n            password: '',\n            rememberMe: false,\n            captchaUrl: '',\n        },\n        validate: (values) => {\n            const errors: FormikErrorType = {};\n            if (!values.email) {\n                errors.email = 'Логин обязателен';\n            } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\n                errors.email = 'Некорректный email';\n            }\n            if (!values.password) {\n                errors.password = 'Пароль обязателен';\n            } else if (values.password.length < 3) {\n                errors.password = 'Пароль минимум 3 символа';\n            }\n            return errors;\n        },\n        onSubmit: values => {\n            dispatch(login(values.email, values.password, values.rememberMe, values.captchaUrl)) // captcha\n            formik.resetForm()\n        },\n    })\n\n    if (isLoggedIn) {\n        return <Redirect from={'/login'} to={'/profile/:userId?'}/>\n    }\n\n    return <Grid container justifyContent={'center'}>\n        <Grid item justifyContent={'center'}>\n            <FormControl>\n                <FormLabel>\n                    <p><p>Чтобы зарегистрироваться пройдите </p>\n                        <a href='https://social-network.samuraijs.com/' rel='noreferrer'\n                           target={'_blank'}>по ссылке\n                        </a>\n                    </p>\n                    <p>или используйте временный доступ:</p>\n                    <p>Login: <b>free@samuraijs.com</b></p>\n                    <p>Password: <b>free</b></p>\n                </FormLabel>\n\n                <form onSubmit={formik.handleSubmit}>\n                    <FormGroup>\n                        <TextField label='email'\n                                   margin=\"normal\"\n                                   type='email'\n                                   {...formik.getFieldProps('email')}\n                        />\n                        {formik.touched.email && formik.errors.email &&\n                        <div style={{color: 'red'}}>{formik.errors.email}</div>}\n\n                        <TextField label='password'\n                                   margin=\"normal\"\n                                   type='password'\n                                   {...formik.getFieldProps('password')}\n                        />\n                        {formik.touched.password && formik.errors.password &&\n                        <div style={{color: 'red'}}>{formik.errors.password}</div>}\n\n                        <FormControlLabel label='Remember me'\n                                          control={<Checkbox/>}\n                                          {...formik.getFieldProps('rememberMe')}\n                                          checked={formik.values.rememberMe}\n                        />\n\n                        {captchaUrl && <><img src={captchaUrl} alt=\"captcha\"/>\n                            <TextField label='captcha' // captcha\n                                       margin=\"normal\"\n                                       {...formik.getFieldProps('captchaUrl')} // captcha\n                            /></>}\n                        <Button type={'submit'} variant={'contained'} color={'primary'}>\n                            Войти\n                        </Button>\n                    </FormGroup>\n                </form>\n            </FormControl>\n        </Grid>\n    </Grid>\n}","import React, {ComponentType, Suspense} from 'react';\nimport styles from './App.module.css';\nimport {BrowserRouter, Redirect, Route, Switch, withRouter} from 'react-router-dom';\nimport Navbar from \"../Navbar/Navbar\";\nimport News from \"../News/News\";\nimport Music from \"../Music/Music\";\nimport Photo from \"../Photo/Photo\";\nimport Video from \"../Video/Video\";\nimport Settings from \"../Settings/Settings\";\nimport HeaderContainer from \"../Header/HeaderContainer\";\nimport {connect, Provider} from \"react-redux\";\nimport {AppStateType, store} from \"../../redux/reduxStore\";\nimport {compose} from \"redux\";\nimport {initializeApp} from \"../../redux/appReducer\";\nimport Preloader from \"../Common/Preloader/Preloader\";\nimport {Login} from \"../Login/Login\";\n// import ProfileContainer from \"../Profile/ProfileContainer\";\n// import DialogsContainer from \"../Dialogs/DialogsContainer\";\n// import UsersContainer from \"../Users/UsersContainer\";\nconst ProfileContainer = React.lazy(() => import('../Profile/ProfileContainer'));\nconst DialogsContainer = React.lazy(() => import('../Dialogs/DialogsContainer'));\nconst UsersContainer = React.lazy(() => import('../Users/UsersContainer'));\n\n\ntype MapDispatchType = {\n    initializeApp: () => void\n}\n\ninterface PropsType extends MapDispatchType {\n    initialized: boolean\n}\n\ninterface StateType {\n}\n\nclass App extends React.Component<PropsType, StateType> {\n    componentDidMount() {\n        this.props.initializeApp()\n    }\n\n    render() {\n        if (!this.props.initialized) {\n            return <Preloader/>\n        }\n        return (\n            <div className={styles.container}>\n                <div className={styles.app__wrapper}>\n                    <HeaderContainer/>\n                    <Navbar/>\n                    <div className={styles.content__wrapper}>\n                        <div className={styles.content__inner}>\n                            <Suspense fallback={<Preloader/>}>\n                                <Switch>\n                                    <Route path='/profile/:userId?' component={ProfileContainer}/>\n                                    <Route path='/dialogs' component={DialogsContainer}/>\n                                    <Route path='/users' component={UsersContainer}/>\n                                </Switch>\n                            </Suspense>\n                            <Route path='/news' render={() => <News/>}/>\n                            <Route path='/music' render={() => <Music/>}/>\n                            <Route path='/photo' render={() => <Photo/>}/>\n                            <Route path='/video' render={() => <Video/>}/>\n                            <Route path='/settings' render={() => <Settings/>}/>\n                            <Route path='/login' render={() => <Login/>}/>\n                            <Redirect from={'*'} to={'/profile'}/>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        )\n    }\n}\n\nconst mstp = (state: AppStateType) => ({\n    initialized: state.app.initialized\n})\n\nlet AppContainer = compose<ComponentType>(\n    withRouter,\n    connect(mstp, {initializeApp}))(App)\n\nlet SocialApp = () => {\n    return (\n        <BrowserRouter basename={process.env.PUBLIC_URL}>\n            <Provider store={store}>\n                <AppContainer/>\n            </Provider>\n        </BrowserRouter>\n    )\n}\n\nexport default SocialApp\n\n\n\n\n\n\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport SocialApp from \"./components/App/App\";\n\n\nReactDOM.render(\n   <SocialApp/>, document.getElementById('root'))\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"Header_header__1VCKf\",\"header__inner\":\"Header_header__inner__26ef8\",\"headerLogo\":\"Header_headerLogo__pHUY0\",\"headerTitle\":\"Header_headerTitle__3Y2pE\",\"loginBlock\":\"Header_loginBlock__6mma5\",\"loginLogoutBtn\":\"Header_loginLogoutBtn__31tEv\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"App_container__16xz_\",\"app__wrapper\":\"App_app__wrapper__1z8PO\",\"content__wrapper\":\"App_content__wrapper__32aMC\",\"content__inner\":\"App_content__inner__37WXs\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"fOnline__inner\":\"FriendsAvatar_fOnline__inner__3mbGn\",\"fOnline__name\":\"FriendsAvatar_fOnline__name__2sdlO\",\"fOnline__ava\":\"FriendsAvatar_fOnline__ava__22q3P\"};"],"sourceRoot":""}