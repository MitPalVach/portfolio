{"version":3,"sources":["api/todolists-api.ts","app/app-reducer.ts","features/TodolistsList/todolists-reducer.ts","features/TodolistsList/tasks-reducer.ts","components/AddItemForm/AddItemForm.tsx","components/EditableSpan/EditableSpan.tsx","features/TodolistsList/Todolist/Task/Task.tsx","features/TodolistsList/Todolist/Todolist.tsx","features/TodolistsList/TodolistsList.tsx","components/ErrorSnackbar/ErrorSnackbar.tsx","app/styles.ts","app/App.tsx","app/store.ts","index.tsx"],"names":["TaskStatuses","TaskPriorities","instance","axios","create","baseURL","withCredentials","headers","todolistsAPI","get","title","post","id","delete","put","todolistId","taskId","taskTitle","model","initialState","status","error","setAppStatusAC","type","setAppErrorAC","updateTaskTC","domainModel","dispatch","getState","task","tasks","find","t","apiModel","deadline","description","priority","startDate","then","res","action","updateTaskAC","console","warn","AddItemForm","React","memo","props","useState","setTitle","setError","addItem","trim","TextField","variant","value","onChange","e","currentTarget","onKeyPress","key","label","helperText","IconButton","color","onClick","AddBox","EditableSpan","editMode","setEditMode","autoFocus","onBlur","onDoubleClick","Task","onClickHandler","useCallback","removeTask","onChangeHandler","newIsDoneValue","checked","changeTaskStatus","Completed","New","onTitleChangeHandler","newValue","changeTaskTitle","className","Checkbox","Delete","Todolist","log","useDispatch","useEffect","thunk","setTasksAC","data","items","addTask","changeTodolistTitle","onAllClickHandler","changeFilter","onActiveClickHandler","onCompletedClickHandler","tasksForTodolist","filter","removeTodolist","map","style","paddingTop","Button","TodolistsList","todolists","useSelector","state","removeTaskAC","removeTaskTC","resultCode","item","addTaskAC","messages","length","addTaskTC","changeStatus","newTitle","changeTodolistTitleAC","changeTodolistTitleTC","addTodolist","todolist","addTodolistTC","Grid","container","padding","spacing","tl","allTodolistTasks","Paper","Alert","forwardRef","ref","elevation","ErrorSnackbar","app","handleClose","event","reason","Snackbar","open","autoHideDuration","onClose","severity","sx","width","headerBtn","borderRadius","border","headerTitle","justifyContent","App","AppBar","position","Toolbar","edge","Menu","Typography","LinearProgress","Container","fixed","rootReducer","combineReducers","todoListId","copyState","forEach","store","createStore","applyMiddleware","thunkMiddleware","window","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"iHAyDYA,EAMAC,E,+EAvDNC,E,OAAWC,EAAMC,OAAN,aACbC,QAAS,iDAPI,CACbC,iBAAiB,EACjBC,QAAS,CACL,UAAW,2CASNC,EAAe,WAGpB,OADgBN,EAASO,IAAoB,eAFxCD,EAAe,SAKTE,GAEX,OADgBR,EAASS,KAA2C,aAAc,CAACD,MAAOA,KANrFF,EAAe,SASTI,GAEX,OADgBV,EAASW,OAAT,qBAA4CD,KAVvDJ,EAAe,SAaTI,EAAYF,GAEvB,OADgBR,EAASY,IAAT,qBAAyCF,GAAM,CAACF,MAAOA,KAdlEF,EAAe,SAiBfO,GACL,OAAOb,EAASO,IAAT,qBAA6CM,EAA7C,YAlBFP,EAAe,SAoBbO,EAAoBC,GAC3B,OAAOd,EAASW,OAAT,qBAA4CE,EAA5C,kBAAgEC,KArBlER,EAAe,SAuBbO,EAAoBE,GAC3B,OAAOf,EAASS,KAAT,qBAA6DI,EAA7D,UAAiF,CAACL,MAAOO,KAxB3FT,EAAe,SA0BbO,EAAoBC,EAAgBE,GAC3C,OAAOhB,EAASY,IAAT,qBAAmDC,EAAnD,kBAAuEC,GAAUE,K,SAgBpFlB,O,aAAAA,I,2BAAAA,I,yBAAAA,I,kBAAAA,M,cAMAC,O,aAAAA,I,mBAAAA,I,WAAAA,I,uBAAAA,I,kBAAAA,M,KC1DZ,IAAMkB,EAAe,CACjBC,OAAQ,UACRC,MAAO,SAgBEC,EAAiB,SAACF,GAAD,MAAgC,CAACG,KAAM,iBAAkBH,WAC1EI,EAAgB,SAACH,GAAD,MAA2B,CAACE,KAAM,gBAAiBF,UCpB1EF,EAA0C,G,OCG1CA,EAA+B,GA6FxBM,EAAe,SAACT,EAAgBU,EAAwCX,GAAzD,OACxB,SAACY,EAAiCC,GAC9B,IACMC,EADQD,IACKE,MAAMf,GAAYgB,MAAK,SAAAC,GAAC,OAAIA,EAAEpB,KAAOI,KACxD,GAAKa,EAAL,CAMA,IAAMI,EAA6B,aAC/BC,SAAUL,EAAKK,SACfC,YAAaN,EAAKM,YAClBC,SAAUP,EAAKO,SACfC,UAAWR,EAAKQ,UAChB3B,MAAOmB,EAAKnB,MACZU,OAAQS,EAAKT,QACVM,GAGPlB,EAAwBO,EAAYC,EAAQiB,GACvCK,MAAK,SAAAC,GACF,IAAMC,EA5EM,SAACxB,EAAgBE,EAAkCH,GAAnD,MACvB,CAACQ,KAAM,cAAeL,QAAOH,aAAYC,UA2EfyB,CAAazB,EAAQU,EAAaX,GACjDY,EAASa,WAjBbE,QAAQC,KAAK,iC,0CChGZC,EAAcC,IAAMC,MAAK,SAAUC,GAG5C,MAAwBC,mBAAS,IAAjC,mBAAKtC,EAAL,KAAYuC,EAAZ,KACA,EAAwBD,mBAAwB,MAAhD,mBAAK3B,EAAL,KAAY6B,EAAZ,KAEMC,EAAU,WACS,KAAjBzC,EAAM0C,QACNL,EAAMI,QAAQzC,GACduC,EAAS,KAETC,EAAS,uJAiBjB,OAAO,gCACH,cAACG,EAAA,EAAD,CAAWC,QAAQ,WACRjC,QAASA,EACTkC,MAAO7C,EACP8C,SAjBS,SAACC,GACrBR,EAASQ,EAAEC,cAAcH,QAiBdI,WAdW,SAACF,GACT,OAAVpC,GACA6B,EAAS,MAEC,UAAVO,EAAEG,KACFT,KAUOU,MAAM,8FACNC,WAAYzC,IAEvB,cAAC0C,EAAA,EAAD,CAAYC,MAAM,UAAUC,QAASd,EAArC,SACI,cAACe,EAAA,EAAD,YCvCCC,EAAetB,IAAMC,MAAK,SAAUC,GAE7C,MAA8BC,oBAAS,GAAvC,mBAAKoB,EAAL,KAAeC,EAAf,KACA,EAAwBrB,mBAASD,EAAMQ,OAAvC,mBAAK7C,EAAL,KAAYuC,EAAZ,KAcA,OAAOmB,EACD,cAACf,EAAA,EAAD,CAAWE,MAAO7C,EAAO8C,SALX,SAACC,GACjBR,EAASQ,EAAEC,cAAcH,QAIyBe,WAAS,EAACC,OATvC,WACrBF,GAAY,GACZtB,EAAMS,SAAS9C,MAQb,sBAAM8D,cAda,WACrBH,GAAY,GACZpB,EAASF,EAAMQ,QAYb,SAAwCR,EAAMQ,W,kBCb3CkB,EAAO5B,IAAMC,MAAK,SAACC,GAC5B,IAAM2B,EAAiBC,uBAAY,kBAAM5B,EAAM6B,WAAW7B,EAAMlB,KAAKjB,GAAImC,EAAMhC,cAAa,CAACgC,EAAMlB,KAAKjB,GAAImC,EAAMhC,aAE5G8D,EAAkBF,uBAAY,SAAClB,GACjC,IAAIqB,EAAiBrB,EAAEC,cAAcqB,QACrChC,EAAMiC,iBAAiBjC,EAAMlB,KAAKjB,GAAIkE,EAAiB9E,EAAaiF,UAAYjF,EAAakF,IAAKnC,EAAMhC,cACzG,CAACgC,EAAMlB,KAAKjB,GAAImC,EAAMhC,aAEnBoE,EAAuBR,uBAAY,SAACS,GACtCrC,EAAMsC,gBAAgBtC,EAAMlB,KAAKjB,GAAIwE,EAAUrC,EAAMhC,cACtD,CAACgC,EAAMlB,KAAKjB,GAAImC,EAAMhC,aAEzB,OAAO,sBAAyBuE,UAAWvC,EAAMlB,KAAKT,SAAWpB,EAAaiF,UAAY,UAAY,GAA/F,UACH,cAACM,EAAA,EAAD,CACIR,QAAShC,EAAMlB,KAAKT,SAAWpB,EAAaiF,UAC5CjB,MAAM,UACNR,SAAUqB,IAGd,cAACV,EAAD,CAAcZ,MAAOR,EAAMlB,KAAKnB,MAAO8C,SAAU2B,IACjD,cAACpB,EAAA,EAAD,CAAYE,QAASS,EAArB,SACI,cAACc,EAAA,EAAD,QATSzC,EAAMlB,KAAKjB,O,SCAnB6E,EAAW5C,IAAMC,MAAK,SAAUC,GACzCL,QAAQgD,IAAI,mBAEZ,IAAM/D,EAAWgE,cACjBC,qBAAU,WACN,IJoBqB7E,EIpBf8E,GJoBe9E,EIpBMgC,EAAMnC,GJoBW,SAACe,GACjDA,EAASL,EAAe,YACxBd,EAAsBO,GACjBuB,MAAK,SAACC,GACH,IACMC,EATQ,SAACV,EAAwBf,GAAzB,MACrB,CAACQ,KAAM,YAAaO,QAAOf,cAQL+E,CADDvD,EAAIwD,KAAKC,MACUjF,GACjCY,EAASa,GACTb,EAASL,EAAe,mBI1B5BK,EAASkE,KACV,IAEH,IAAMI,EAAUtB,uBAAY,SAACjE,GACzBqC,EAAMkD,QAAQvF,EAAOqC,EAAMnC,MAC5B,CAACmC,EAAMkD,QAASlD,EAAMnC,KAKnBsF,EAAsBvB,uBAAY,SAACjE,GACrCqC,EAAMmD,oBAAoBnD,EAAMnC,GAAIF,KACrC,CAACqC,EAAMnC,GAAImC,EAAMmD,sBAEdC,EAAoBxB,uBAAY,kBAAM5B,EAAMqD,aAAa,MAAOrD,EAAMnC,MAAK,CAACmC,EAAMnC,GAAImC,EAAMqD,eAC5FC,EAAuB1B,uBAAY,kBAAM5B,EAAMqD,aAAa,SAAUrD,EAAMnC,MAAK,CAACmC,EAAMnC,GAAImC,EAAMqD,eAClGE,EAA0B3B,uBAAY,kBAAM5B,EAAMqD,aAAa,YAAarD,EAAMnC,MAAK,CAACmC,EAAMnC,GAAImC,EAAMqD,eAG1GG,EAAmBxD,EAAMjB,MAS7B,MAPqB,WAAjBiB,EAAMyD,SACND,EAAmBxD,EAAMjB,MAAM0E,QAAO,SAAAxE,GAAC,OAAIA,EAAEZ,SAAWpB,EAAakF,QAEpD,cAAjBnC,EAAMyD,SACND,EAAmBxD,EAAMjB,MAAM0E,QAAO,SAAAxE,GAAC,OAAIA,EAAEZ,SAAWpB,EAAaiF,cAGlE,gCACH,+BAAI,cAACd,EAAD,CAAcZ,MAAOR,EAAMrC,MAAO8C,SAAU0C,IAC5C,cAACnC,EAAA,EAAD,CAAYE,QAvBG,WACnBlB,EAAM0D,eAAe1D,EAAMnC,KAsBvB,SACI,cAAC4E,EAAA,EAAD,SAGR,cAAC5C,EAAD,CAAaO,QAAS8C,IACtB,8BAEQM,EAAiBG,KAAI,SAAA1E,GAAC,OAAI,cAACyC,EAAD,CAAiB5C,KAAMG,EAAGjB,WAAYgC,EAAMnC,GACtCgE,WAAY7B,EAAM6B,WAClBS,gBAAiBtC,EAAMsC,gBACvBL,iBAAkBjC,EAAMiC,kBAHnBhD,EAAEpB,SAO/C,sBAAK+F,MAAO,CAACC,WAAY,QAAzB,UACI,cAACC,EAAA,EAAD,CAAQvD,QAA0B,QAAjBP,EAAMyD,OAAmB,WAAa,OAC/CvC,QAASkC,EACTnC,MAAO,UAFf,gCAKA,cAAC6C,EAAA,EAAD,CAAQvD,QAA0B,WAAjBP,EAAMyD,OAAsB,WAAa,OAClDvC,QAASoC,EACTrC,MAAO,UAFf,8DAIA,cAAC6C,EAAA,EAAD,CAAQvD,QAA0B,cAAjBP,EAAMyD,OAAyB,WAAa,OACrDvC,QAASqC,EACTtC,MAAO,YAFf,mF,kBCnEC8C,EAA0B,WAEnC,IAAMC,EAAYC,aAAyD,SAAAC,GAAK,OAAIA,EAAMF,aACpFjF,EAAQkF,aAA8C,SAAAC,GAAK,OAAIA,EAAMnF,SAErEH,EAAWgE,cAEjBC,qBAAU,WACN,IAAMC,ENYH,SAAClE,GACJA,EAASL,EAAe,YACxBd,IACK8B,MAAK,SAACC,GACHZ,EARmD,CAACJ,KAAM,gBAAiBwF,UAQnDxE,EAAIwD,OAC5BpE,EAASL,EAAe,kBMhBhCK,EAASkE,KACV,IAEH,IAAMjB,EAAaD,uBAAY,SAAU/D,EAAYG,GACjD,IAAM8E,EL6Bc,SAAC7E,EAAgBD,GAAjB,OAAwC,SAACY,GACjEA,EAASL,EAAe,YACxBd,EAAwBO,EAAYC,GAC/BsB,MAAK,SAAAC,GACF,IAAMC,EAxBU,SAACxB,EAAgBD,GAAjB,MACvB,CAACQ,KAAM,cAAeP,SAAQD,cAuBRmG,CAAalG,EAAQD,GACpCY,EAASa,GACTb,EAASL,EAAe,kBKnCd6F,CAAavG,EAAIG,GAC/BY,EAASkE,KACV,IAEGI,EAAUtB,uBAAY,SAAUjE,EAAeK,GACjD,IAAM8E,ELiCW,SAACnF,EAAeK,GAAhB,OAAuC,SAACY,GAC7DA,EAASL,EAAe,YACxBd,EAAwBO,EAAYL,GAC/B4B,MAAK,SAAAC,GACF,GAA4B,IAAxBA,EAAIwD,KAAKqB,WAAkB,CAC3B,IAAMvF,EAAOU,EAAIwD,KAAKA,KAAKsB,KAC3B1F,EAjCS,SAACE,GAAD,MACpB,CAACN,KAAM,WAAYM,QAgCCyF,CAAUzF,IACnBF,EAASL,EAAe,mBAEpBiB,EAAIwD,KAAKwB,SAASC,OAClB7F,EAASH,EAAce,EAAIwD,KAAKwB,SAAS,KAEzC5F,EAASH,EAAc,wBAE3BG,EAASL,EAAe,eK/ClBmG,CAAU/G,EAAOK,GAC/BY,EAASkE,KACV,IAEG6B,EAAe/C,uBAAY,SAAU/D,EAAYQ,EAAsBL,GACzE,IAAM8E,EAAQpE,EAAab,EAAI,CAACQ,UAASL,GACzCY,EAASkE,KACV,IAEGR,EAAkBV,uBAAY,SAAU/D,EAAY+G,EAAkB5G,GACxE,IAAM8E,EAAQpE,EAAab,EAAI,CAACF,MAAOiH,GAAW5G,GAClDY,EAASkE,KACV,IAEGO,EAAezB,uBAAY,SAAUpB,EAAyBxC,GAChE,IAAMyB,ENtBmE,CAC7EjB,KAAM,yBACNX,GMoB0CG,ENnB1CyF,OMmBsDjD,GAClD5B,EAASa,KACV,IAEGiE,EAAiB9B,uBAAY,SAAU/D,GACzC,INTyBG,EMSnB8E,GNTmB9E,EMSMH,ENR5B,SAACe,GACJA,EAASL,EAAe,YACxBd,EAA4BO,GACvBuB,MAAK,SAACC,GACHZ,EA9BiC,CAACJ,KAAM,kBAAmBX,GA8BjCG,IAC1BY,EAASL,EAAe,mBMIhCK,EAASkE,KACV,IAEGK,EAAsBvB,uBAAY,SAAU/D,EAAYF,GAC1D,IAAMmF,ENMuB,SAACjF,EAAYF,GAC9C,OAAO,SAACiB,GACJA,EAASL,EAAe,YACxBd,EAA4BI,EAAIF,GAC3B4B,MAAK,SAACC,GACHZ,EAhDqB,SAACf,EAAYF,GAAb,MAAgC,CACjEa,KAAM,wBACNX,KACAF,SA6CqBkH,CAAsBhH,EAAIF,IACnCiB,EAASL,EAAe,kBMZlBuG,CAAsBjH,EAAIF,GACxCiB,EAASkE,KACV,IAEGiC,EAAcnD,uBAAY,SAACjE,GAC7B,IAAMmF,ENTe,SAACnF,GAC1B,OAAO,SAACiB,GACJA,EAASL,EAAe,YACxBd,EAA4BE,GACvB4B,MAAK,SAACC,GACHZ,EAvC0C,CAACJ,KAAM,eAAgBwG,SAuC1CxF,EAAIwD,KAAKA,KAAKsB,OACrC1F,EAASL,EAAe,kBMGlB0G,CAActH,GAC5BiB,EAASkE,KACV,CAAClE,IAGJ,OAAO,qCACH,cAACsG,EAAA,EAAD,CAAMC,WAAS,EAACvB,MAAO,CAACwB,QAAS,QAAjC,SACI,cAACvF,EAAD,CAAaO,QAAS2E,MAE1B,cAACG,EAAA,EAAD,CAAMC,WAAS,EAACE,QAAS,EAAzB,SAEQrB,EAAUL,KAAI,SAAA2B,GACV,IAAIC,EAAmBxG,EAAMuG,EAAGzH,IAEhC,OAAO,cAACqH,EAAA,EAAD,CAAMZ,MAAI,EAAV,SACH,cAACkB,EAAA,EAAD,CAAO5B,MAAO,CAACwB,QAAS,QAAxB,SACI,cAAC1C,EAAD,CACI7E,GAAIyH,EAAGzH,GACPF,MAAO2H,EAAG3H,MACVoB,MAAOwG,EACP1D,WAAYA,EACZwB,aAAcA,EACdH,QAASA,EACTjB,iBAAkB0C,EAClBlB,OAAQ6B,EAAG7B,OACXC,eAAgBA,EAChBpB,gBAAiBA,EACjBa,oBAAqBA,OAbVmC,EAAGzH,a,wEC1ExC4H,EAAQ3F,IAAM4F,YAAuC,SACvD1F,EAAO2F,GACP,OAAO,cAAC,IAAD,aAAUC,UAAW,EAAGD,IAAKA,EAAKpF,QAAQ,UAAaP,OAG3D,SAAS6F,IACZ,IAAMvH,EAAQ2F,aAA6C,SAAAC,GAAK,OAAIA,EAAM4B,IAAIxH,SACxEM,EAAWgE,cAEXmD,EAAc,SAACC,EAA8BC,GAChC,cAAXA,GAGJrH,EAASH,EAAc,QAG3B,OACI,cAACyH,EAAA,EAAD,CAAUC,KAAgB,OAAV7H,EAAgB8H,iBAAkB,IAAMC,QAASN,EAAjE,SACI,cAAC,EAAD,CAAOM,QAASN,EAAaO,SAAS,QAAQC,GAAI,CAACC,MAAO,QAA1D,SACKlI,MC3BV,IAAMmI,GAAY,CACrBC,aAAc,EACdC,OAAQ,kBACRvB,QAAS,GAGAwB,GAAc,CACvBC,eAAgB,iBCoCLC,OAzBf,WACI,IAAMzI,EAAS4F,aAAiD,SAACC,GAAD,OAAWA,EAAM4B,IAAIzH,UAErF,OACI,sBAAKkE,UAAU,MAAf,UACI,cAACwE,EAAA,EAAD,CAAQC,SAAS,SAAjB,SACI,eAACC,EAAA,EAAD,CAASrD,MAAOgD,GAAhB,UACI,cAAC5F,EAAA,EAAD,CAAYkG,KAAK,QAAQjG,MAAM,UAAU,aAAW,OAApD,SACI,cAACkG,EAAA,EAAD,MAEJ,cAACC,EAAA,EAAD,CAAY7G,QAAQ,KAApB,kDAGA,cAACuD,EAAA,EAAD,CAAQ7C,MAAM,UAAU2C,MAAO6C,GAA/B,iDAGI,YAAXpI,GAAwB,cAACgJ,EAAA,EAAD,CAAgBpG,MAAM,YAC/C,cAACqG,EAAA,EAAD,CAAWC,OAAK,EAAhB,SACI,cAAC,EAAD,MAEJ,cAAC1B,EAAD,Q,kBC9BN2B,GAAcC,aAAgB,CAChC1I,MTAwB,WAAgF,IAA/EmF,EAA8E,uDAAtD9F,EAAcqB,EAAwC,uCACvG,OAAQA,EAAOjB,MACX,IAAK,cACD,OAAO,2BAAI0F,GAAX,kBAAmBzE,EAAOzB,WAAakG,EAAMzE,EAAOzB,YAAYyF,QAAO,SAAAxE,GAAC,OAAIA,EAAEpB,KAAO4B,EAAOxB,YAChG,IAAK,WACD,OAAO,2BAAIiG,GAAX,kBAAmBzE,EAAOX,KAAK4I,WAA/B,CAA6CjI,EAAOX,MAApD,mBAA6DoF,EAAMzE,EAAOX,KAAK4I,gBACnF,IAAK,cACD,OAAO,2BACAxD,GADP,kBAEKzE,EAAOzB,WAAakG,EAAMzE,EAAOzB,YAC7B2F,KAAI,SAAA1E,GAAC,OAAIA,EAAEpB,KAAO4B,EAAOxB,OAAhB,2BAA6BgB,GAAMQ,EAAOtB,OAASc,OAEzE,IAAK,eACD,OAAO,2BAAIiF,GAAX,kBAAmBzE,EAAOuF,SAASnH,GAAK,KAC5C,IAAK,kBACD,IAAM8J,EAAS,eAAOzD,GAEtB,cADOyD,EAAUlI,EAAO5B,IACjB8J,EACX,IAAK,gBACD,IAAMA,EAAS,eAAOzD,GAItB,OAHAzE,EAAOuE,UAAU4D,SAAQ,SAAAtC,GACrBqC,EAAUrC,EAAGzH,IAAM,MAEhB8J,EAEX,IAAK,YACD,OAAO,2BAAIzD,GAAX,kBAAmBzE,EAAOzB,WAAayB,EAAOV,QAClD,QACI,OAAOmF,IS3BfF,UVJ4B,WAAsG,IAArGE,EAAoG,uDAAjE9F,EAAcqB,EAAmD,uCACjI,OAAQA,EAAOjB,MACX,IAAK,kBACD,OAAO0F,EAAMT,QAAO,SAAA6B,GAAE,OAAIA,EAAGzH,KAAO4B,EAAO5B,MAC/C,IAAK,eACD,MAAM,CAAN,2BAAY4B,EAAOuF,UAAnB,IAA6BvB,OAAQ,SAArC,mBAAgDS,IACpD,IAAK,wBACD,OAAOA,EAAMP,KAAI,SAAA2B,GAAE,OAAIA,EAAGzH,KAAO4B,EAAO5B,GAAjB,2BAA0ByH,GAA1B,IAA8B3H,MAAO8B,EAAO9B,QAAS2H,KAChF,IAAK,yBACD,OAAOpB,EAAMP,KAAI,SAAA2B,GAAE,OAAIA,EAAGzH,KAAO4B,EAAO5B,GAAjB,2BAA0ByH,GAA1B,IAA8B7B,OAAQhE,EAAOgE,SAAU6B,KAClF,IAAK,gBACD,OAAO7F,EAAOuE,UAAUL,KAAI,SAAA2B,GAAE,kCAASA,GAAT,IAAa7B,OAAQ,WACvD,QACI,OAAOS,IURf4B,IXCsB,WAAoF,IAAnF5B,EAAkF,uDAAxD9F,EAAcqB,EAA0C,uCACzG,OAAQA,EAAOjB,MACX,IAAK,iBACD,OAAO,2BAAI0F,GAAX,IAAkB7F,OAAQoB,EAAOpB,SACrC,IAAK,gBACD,OAAO,2BAAI6F,GAAX,IAAkB5F,MAAOmB,EAAOnB,QACpC,QACI,OAAO4F,MWLN2D,GAAQC,aAAYN,GAAaO,aAAgBC,OAM9DC,OAAOJ,MAAQA,GCbfK,IAASC,OACL,cAAC,IAAMC,WAAP,UACI,cAAC,IAAD,CAAUP,MAAOA,GAAjB,SACI,cAAC,GAAD,QAGRQ,SAASC,eAAe,U","file":"static/js/main.11d366d6.chunk.js","sourcesContent":["import axios from 'axios'\r\n\r\nconst settings = {\r\n    withCredentials: true,\r\n    headers: {\r\n        'API-KEY': '411482a7-ac02-48c2-a201-383524308513'\r\n    }\r\n}\r\nconst instance = axios.create({\r\n    baseURL: 'https://social-network.samuraijs.com/api/1.1/',\r\n    ...settings\r\n})\r\n\r\n// api\r\nexport const todolistsAPI = {\r\n    getTodolists() {\r\n        const promise = instance.get<TodolistType[]>('todo-lists');\r\n        return promise;\r\n    },\r\n    createTodolist(title: string) {\r\n        const promise = instance.post<ResponseType<{ item: TodolistType }>>('todo-lists', {title: title});\r\n        return promise;\r\n    },\r\n    deleteTodolist(id: string) {\r\n        const promise = instance.delete<ResponseType>(`todo-lists/${id}`);\r\n        return promise;\r\n    },\r\n    updateTodolist(id: string, title: string) {\r\n        const promise = instance.put<ResponseType>(`todo-lists/${id}`, {title: title});\r\n        return promise;\r\n    },\r\n    getTasks(todolistId: string) {\r\n        return instance.get<GetTasksResponse>(`todo-lists/${todolistId}/tasks`);\r\n    },\r\n    deleteTask(todolistId: string, taskId: string) {\r\n        return instance.delete<ResponseType>(`todo-lists/${todolistId}/tasks/${taskId}`);\r\n    },\r\n    createTask(todolistId: string, taskTitle: string) {\r\n        return instance.post<ResponseType<{ item: TaskType}>>(`todo-lists/${todolistId}/tasks`, {title: taskTitle});\r\n    },\r\n    updateTask(todolistId: string, taskId: string, model: UpdateTaskModelType) {\r\n        return instance.put<ResponseType<TaskType>>(`todo-lists/${todolistId}/tasks/${taskId}`, model);\r\n    }\r\n}\r\n\r\n// types\r\nexport type TodolistType = {\r\n    id: string\r\n    title: string\r\n    addedDate: string\r\n    order: number\r\n}\r\nexport type ResponseType<D = {}> = {\r\n    resultCode: number\r\n    messages: Array<string>\r\n    data: D\r\n}\r\nexport enum TaskStatuses {\r\n    New = 0,\r\n    InProgress = 1,\r\n    Completed = 2,\r\n    Draft = 3\r\n}\r\nexport enum TaskPriorities {\r\n    Low = 0,\r\n    Middle = 1,\r\n    Hi = 2,\r\n    Urgently = 3,\r\n    Later = 4\r\n}\r\nexport type TaskType = {\r\n    description: string\r\n    title: string\r\n    status: TaskStatuses\r\n    priority: TaskPriorities\r\n    startDate: string\r\n    deadline: string\r\n    id: string\r\n    todoListId: string\r\n    order: number\r\n    addedDate: string\r\n}\r\nexport type UpdateTaskModelType = {\r\n    title: string\r\n    description: string\r\n    status: TaskStatuses\r\n    priority: TaskPriorities\r\n    startDate: string\r\n    deadline: string\r\n}\r\ntype GetTasksResponse = {\r\n    error: string | null\r\n    totalCount: number\r\n    items: TaskType[]\r\n}\r\n","export type RequestStatusType = 'idle' | 'loading' | 'succeeded' | 'failed'\n\n// status === 'loading' - показываем крутилку\n// status === 'idle' | 'succeeded' | 'failed'' - прячем крутилку\n\nconst initialState = {\n    status: 'loading' as RequestStatusType,\n    error: 'error' as string | null,\n}\n\ntype InitialStateType = typeof initialState\n\nexport const appReducer = (state: InitialStateType = initialState, action: ActionsType): InitialStateType => {\n    switch (action.type) {\n        case 'APP/SET-STATUS':\n            return {...state, status: action.status}\n        case \"APP/SET-ERROR\":\n            return {...state, error: action.error}\n        default:\n            return state\n    }\n}\n\nexport const setAppStatusAC = (status: RequestStatusType) => ({type: 'APP/SET-STATUS', status} as const)\nexport const setAppErrorAC = (error: string | null) => ({type: 'APP/SET-ERROR', error} as const)\n\nexport type SetAppStatusActionType = ReturnType<typeof setAppStatusAC>\nexport type SetAppErrorActionType = ReturnType<typeof setAppErrorAC>\n\ntype ActionsType = SetAppStatusActionType\n    | SetAppErrorActionType\n\n\n\n\n\n","import {todolistsAPI, TodolistType} from '../../api/todolists-api'\r\nimport {Dispatch} from 'redux'\r\nimport {setAppStatusAC, SetAppStatusActionType} from \"../../app/app-reducer\";\r\n\r\nconst initialState: Array<TodolistDomainType> = []\r\n\r\nexport const todolistsReducer = (state: Array<TodolistDomainType> = initialState, action: ActionsType): Array<TodolistDomainType> => {\r\n    switch (action.type) {\r\n        case 'REMOVE-TODOLIST':\r\n            return state.filter(tl => tl.id !== action.id)\r\n        case 'ADD-TODOLIST':\r\n            return [{...action.todolist, filter: 'all'}, ...state]\r\n        case 'CHANGE-TODOLIST-TITLE':\r\n            return state.map(tl => tl.id === action.id ? {...tl, title: action.title} : tl)\r\n        case 'CHANGE-TODOLIST-FILTER':\r\n            return state.map(tl => tl.id === action.id ? {...tl, filter: action.filter} : tl)\r\n        case 'SET-TODOLISTS':\r\n            return action.todolists.map(tl => ({...tl, filter: 'all'}))\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n// actions\r\nexport const removeTodolistAC = (id: string) => ({type: 'REMOVE-TODOLIST', id} as const)\r\nexport const addTodolistAC = (todolist: TodolistType) => ({type: 'ADD-TODOLIST', todolist} as const)\r\nexport const changeTodolistTitleAC = (id: string, title: string) => ({\r\n    type: 'CHANGE-TODOLIST-TITLE',\r\n    id,\r\n    title\r\n} as const)\r\nexport const changeTodolistFilterAC = (id: string, filter: FilterValuesType) => ({\r\n    type: 'CHANGE-TODOLIST-FILTER',\r\n    id,\r\n    filter\r\n} as const)\r\nexport const setTodolistsAC = (todolists: Array<TodolistType>) => ({type: 'SET-TODOLISTS', todolists} as const)\r\n\r\n// thunks\r\nexport const fetchTodolistsTC = () => {\r\n    return (dispatch: Dispatch<ActionsType>) => {\r\n        dispatch(setAppStatusAC('loading'))\r\n        todolistsAPI.getTodolists()\r\n            .then((res) => {\r\n                dispatch(setTodolistsAC(res.data))\r\n                dispatch(setAppStatusAC('succeeded'))\r\n            })\r\n    }\r\n}\r\nexport const removeTodolistTC = (todolistId: string) => {\r\n    return (dispatch: Dispatch<ActionsType>) => {\r\n        dispatch(setAppStatusAC('loading'))\r\n        todolistsAPI.deleteTodolist(todolistId)\r\n            .then((res) => {\r\n                dispatch(removeTodolistAC(todolistId))\r\n                dispatch(setAppStatusAC('succeeded'))\r\n            })\r\n    }\r\n}\r\nexport const addTodolistTC = (title: string) => {\r\n    return (dispatch: Dispatch<ActionsType>) => {\r\n        dispatch(setAppStatusAC('loading'))\r\n        todolistsAPI.createTodolist(title)\r\n            .then((res) => {\r\n                dispatch(addTodolistAC(res.data.data.item))\r\n                dispatch(setAppStatusAC('succeeded'))\r\n            })\r\n    }\r\n}\r\nexport const changeTodolistTitleTC = (id: string, title: string) => {\r\n    return (dispatch: Dispatch<ActionsType>) => {\r\n        dispatch(setAppStatusAC('loading'))\r\n        todolistsAPI.updateTodolist(id, title)\r\n            .then((res) => {\r\n                dispatch(changeTodolistTitleAC(id, title))\r\n                dispatch(setAppStatusAC('succeeded'))\r\n            })\r\n    }\r\n}\r\n\r\n// types\r\nexport type AddTodolistActionType = ReturnType<typeof addTodolistAC>;\r\nexport type RemoveTodolistActionType = ReturnType<typeof removeTodolistAC>;\r\nexport type SetTodolistsActionType = ReturnType<typeof setTodolistsAC>;\r\ntype ActionsType =\r\n    | RemoveTodolistActionType\r\n    | AddTodolistActionType\r\n    | ReturnType<typeof changeTodolistTitleAC>\r\n    | ReturnType<typeof changeTodolistFilterAC>\r\n    | SetTodolistsActionType\r\n    | SetAppStatusActionType\r\nexport type FilterValuesType = 'all' | 'active' | 'completed';\r\nexport type TodolistDomainType = TodolistType & {\r\n    filter: FilterValuesType\r\n}\r\n\r\n","import {AddTodolistActionType, RemoveTodolistActionType, SetTodolistsActionType} from './todolists-reducer'\r\nimport {TaskPriorities, TaskStatuses, TaskType, todolistsAPI, UpdateTaskModelType} from '../../api/todolists-api'\r\nimport {Dispatch} from 'redux'\r\nimport {AppRootStateType} from '../../app/store'\r\nimport {setAppErrorAC, SetAppErrorActionType, setAppStatusAC, SetAppStatusActionType} from \"../../app/app-reducer\";\r\n\r\n\r\nconst initialState: TasksStateType = {}\r\n\r\nexport const tasksReducer = (state: TasksStateType = initialState, action: ActionsType): TasksStateType => {\r\n    switch (action.type) {\r\n        case 'REMOVE-TASK':\r\n            return {...state, [action.todolistId]: state[action.todolistId].filter(t => t.id !== action.taskId)}\r\n        case 'ADD-TASK':\r\n            return {...state, [action.task.todoListId]: [action.task, ...state[action.task.todoListId]]}\r\n        case 'UPDATE-TASK':\r\n            return {\r\n                ...state,\r\n                [action.todolistId]: state[action.todolistId]\r\n                    .map(t => t.id === action.taskId ? {...t, ...action.model} : t)\r\n            }\r\n        case 'ADD-TODOLIST':\r\n            return {...state, [action.todolist.id]: []}\r\n        case 'REMOVE-TODOLIST':\r\n            const copyState = {...state}\r\n            delete copyState[action.id]\r\n            return copyState\r\n        case 'SET-TODOLISTS': {\r\n            const copyState = {...state}\r\n            action.todolists.forEach(tl => {\r\n                copyState[tl.id] = []\r\n            })\r\n            return copyState\r\n        }\r\n        case 'SET-TASKS':\r\n            return {...state, [action.todolistId]: action.tasks}\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n// actions\r\nexport const removeTaskAC = (taskId: string, todolistId: string) =>\r\n    ({type: 'REMOVE-TASK', taskId, todolistId} as const)\r\nexport const addTaskAC = (task: TaskType) =>\r\n    ({type: 'ADD-TASK', task} as const)\r\nexport const updateTaskAC = (taskId: string, model: UpdateDomainTaskModelType, todolistId: string) =>\r\n    ({type: 'UPDATE-TASK', model, todolistId, taskId} as const)\r\nexport const setTasksAC = (tasks: Array<TaskType>, todolistId: string) =>\r\n    ({type: 'SET-TASKS', tasks, todolistId} as const)\r\n\r\n// thunks\r\nexport const fetchTasksTC = (todolistId: string) => (dispatch: Dispatch<ActionsType>) => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    todolistsAPI.getTasks(todolistId)\r\n        .then((res) => {\r\n            const tasks = res.data.items\r\n            const action = setTasksAC(tasks, todolistId)\r\n            dispatch(action)\r\n            dispatch(setAppStatusAC('succeeded'))\r\n        })\r\n}\r\nexport const removeTaskTC = (taskId: string, todolistId: string) => (dispatch: Dispatch<ActionsType>) => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    todolistsAPI.deleteTask(todolistId, taskId)\r\n        .then(res => {\r\n            const action = removeTaskAC(taskId, todolistId)\r\n            dispatch(action)\r\n            dispatch(setAppStatusAC('succeeded'))\r\n        })\r\n}\r\nexport const addTaskTC = (title: string, todolistId: string) => (dispatch: Dispatch<ActionsType>) => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    todolistsAPI.createTask(todolistId, title)\r\n        .then(res => {\r\n            if (res.data.resultCode === 0) {\r\n                const task = res.data.data.item\r\n                dispatch(addTaskAC(task))\r\n                dispatch(setAppStatusAC('succeeded'))\r\n            } else {\r\n                if (res.data.messages.length) {\r\n                    dispatch(setAppErrorAC(res.data.messages[0]))\r\n                } else {\r\n                    dispatch(setAppErrorAC('Some error occurred'))\r\n                }\r\n                dispatch(setAppStatusAC('failed'))\r\n            }\r\n        })\r\n}\r\n//\r\n// export const addTaskTC = (title: string, todolistId: string) => (dispatch: Dispatch<ActionsType>) => {\r\n//     dispatch(setAppStatusAC('loading'))\r\n//     todolistsAPI.createTask(todolistId, title)\r\n//         .then(res => {\r\n//             const task = res.data.data.item\r\n//             const action = addTaskAC(task)\r\n//             dispatch(action)\r\n//             dispatch(setAppStatusAC('succeeded'))\r\n//         })\r\n// }\r\nexport const updateTaskTC = (taskId: string, domainModel: UpdateDomainTaskModelType, todolistId: string) =>\r\n    (dispatch: Dispatch<ActionsType>, getState: () => AppRootStateType) => {\r\n        const state = getState()\r\n        const task = state.tasks[todolistId].find(t => t.id === taskId)\r\n        if (!task) {\r\n            //throw new Error(\"task not found in the state\");\r\n            console.warn('task not found in the state')\r\n            return\r\n        }\r\n\r\n        const apiModel: UpdateTaskModelType = {\r\n            deadline: task.deadline,\r\n            description: task.description,\r\n            priority: task.priority,\r\n            startDate: task.startDate,\r\n            title: task.title,\r\n            status: task.status,\r\n            ...domainModel\r\n        }\r\n\r\n        todolistsAPI.updateTask(todolistId, taskId, apiModel)\r\n            .then(res => {\r\n                const action = updateTaskAC(taskId, domainModel, todolistId)\r\n                dispatch(action)\r\n            })\r\n    }\r\n\r\n// types\r\nexport type UpdateDomainTaskModelType = {\r\n    title?: string\r\n    description?: string\r\n    status?: TaskStatuses\r\n    priority?: TaskPriorities\r\n    startDate?: string\r\n    deadline?: string\r\n}\r\nexport type TasksStateType = {\r\n    [key: string]: Array<TaskType>\r\n}\r\ntype ActionsType =\r\n    | ReturnType<typeof removeTaskAC>\r\n    | ReturnType<typeof addTaskAC>\r\n    | ReturnType<typeof updateTaskAC>\r\n    | AddTodolistActionType\r\n    | RemoveTodolistActionType\r\n    | SetTodolistsActionType\r\n    | ReturnType<typeof setTasksAC>\r\n    | SetAppStatusActionType\r\n    | SetAppErrorActionType\r\n","import React, {ChangeEvent, KeyboardEvent, useState} from 'react';\r\nimport TextField from '@mui/material/TextField';\r\nimport IconButton from '@mui/material/IconButton';\r\nimport {AddBox} from '@mui/icons-material';\r\n\r\n\r\ntype AddItemFormPropsType = {\r\n    addItem: (title: string) => void\r\n}\r\n\r\nexport const AddItemForm = React.memo(function (props: AddItemFormPropsType) {\r\n    // console.log('AddItemForm called')\r\n\r\n    let [title, setTitle] = useState('')\r\n    let [error, setError] = useState<string | null>(null)\r\n\r\n    const addItem = () => {\r\n        if (title.trim() !== '') {\r\n            props.addItem(title);\r\n            setTitle('');\r\n        } else {\r\n            setError('Необходимо ввести название');\r\n        }\r\n    }\r\n\r\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n\r\n    const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        if (error !== null) {\r\n            setError(null);\r\n        }\r\n        if (e.key === 'Enter') {\r\n            addItem();\r\n        }\r\n    }\r\n\r\n    return <div>\r\n        <TextField variant=\"outlined\"\r\n                   error={!!error}\r\n                   value={title}\r\n                   onChange={onChangeHandler}\r\n                   onKeyPress={onKeyPressHandler}\r\n                   label=\"Введите значение\"\r\n                   helperText={error}\r\n        />\r\n        <IconButton color=\"primary\" onClick={addItem}>\r\n            <AddBox/>\r\n        </IconButton>\r\n    </div>\r\n})\r\n","import React, {ChangeEvent, useState} from 'react';\r\nimport TextField from '@mui/material/TextField';\r\n\r\n\r\ntype EditableSpanPropsType = {\r\n    value: string\r\n    onChange: (newValue: string) => void\r\n}\r\n\r\nexport const EditableSpan = React.memo(function (props: EditableSpanPropsType) {\r\n    // console.log('EditableSpan called');\r\n    let [editMode, setEditMode] = useState(false);\r\n    let [title, setTitle] = useState(props.value);\r\n\r\n    const activateEditMode = () => {\r\n        setEditMode(true);\r\n        setTitle(props.value);\r\n    }\r\n    const activateViewMode = () => {\r\n        setEditMode(false);\r\n        props.onChange(title);\r\n    }\r\n    const changeTitle = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n\r\n    return editMode\r\n        ? <TextField value={title} onChange={changeTitle} autoFocus onBlur={activateViewMode}/>\r\n        : <span onDoubleClick={activateEditMode}>{props.value}</span>\r\n});\r\n","import React, {ChangeEvent, useCallback} from 'react'\r\nimport {EditableSpan} from '../../../../components/EditableSpan/EditableSpan'\r\nimport {TaskStatuses, TaskType} from '../../../../api/todolists-api'\r\nimport {Delete} from '@mui/icons-material';\r\nimport IconButton from '@mui/material/IconButton';\r\nimport Checkbox from '@mui/material/Checkbox';\r\n\r\n\r\ntype TaskPropsType = {\r\n    task: TaskType\r\n    todolistId: string\r\n    changeTaskStatus: (id: string, status: TaskStatuses, todolistId: string) => void\r\n    changeTaskTitle: (taskId: string, newTitle: string, todolistId: string) => void\r\n    removeTask: (taskId: string, todolistId: string) => void\r\n}\r\nexport const Task = React.memo((props: TaskPropsType) => {\r\n    const onClickHandler = useCallback(() => props.removeTask(props.task.id, props.todolistId), [props.task.id, props.todolistId]);\r\n\r\n    const onChangeHandler = useCallback((e: ChangeEvent<HTMLInputElement>) => {\r\n        let newIsDoneValue = e.currentTarget.checked\r\n        props.changeTaskStatus(props.task.id, newIsDoneValue ? TaskStatuses.Completed : TaskStatuses.New, props.todolistId)\r\n    }, [props.task.id, props.todolistId]);\r\n\r\n    const onTitleChangeHandler = useCallback((newValue: string) => {\r\n        props.changeTaskTitle(props.task.id, newValue, props.todolistId)\r\n    }, [props.task.id, props.todolistId]);\r\n\r\n    return <div key={props.task.id} className={props.task.status === TaskStatuses.Completed ? 'is-done' : ''}>\r\n        <Checkbox\r\n            checked={props.task.status === TaskStatuses.Completed}\r\n            color=\"primary\"\r\n            onChange={onChangeHandler}\r\n        />\r\n\r\n        <EditableSpan value={props.task.title} onChange={onTitleChangeHandler}/>\r\n        <IconButton onClick={onClickHandler}>\r\n            <Delete/>\r\n        </IconButton>\r\n    </div>\r\n})\r\n","import React, {useCallback, useEffect} from 'react'\r\nimport {AddItemForm} from '../../../components/AddItemForm/AddItemForm'\r\nimport {EditableSpan} from '../../../components/EditableSpan/EditableSpan'\r\nimport {Task} from './Task/Task'\r\nimport {TaskStatuses, TaskType} from '../../../api/todolists-api'\r\nimport {FilterValuesType} from '../todolists-reducer'\r\nimport {useDispatch} from 'react-redux'\r\nimport {fetchTasksTC} from '../tasks-reducer'\r\nimport IconButton from '@mui/material/IconButton';\r\nimport Button from '@mui/material/Button';\r\nimport {Delete} from '@mui/icons-material';\r\n\r\n\r\ntype PropsType = {\r\n    id: string\r\n    title: string\r\n    tasks: Array<TaskType>\r\n    changeFilter: (value: FilterValuesType, todolistId: string) => void\r\n    addTask: (title: string, todolistId: string) => void\r\n    changeTaskStatus: (id: string, status: TaskStatuses, todolistId: string) => void\r\n    changeTaskTitle: (taskId: string, newTitle: string, todolistId: string) => void\r\n    removeTask: (taskId: string, todolistId: string) => void\r\n    removeTodolist: (id: string) => void\r\n    changeTodolistTitle: (id: string, newTitle: string) => void\r\n    filter: FilterValuesType\r\n}\r\n\r\nexport const Todolist = React.memo(function (props: PropsType) {\r\n    console.log('Todolist called')\r\n\r\n    const dispatch = useDispatch()\r\n    useEffect(() => {\r\n        const thunk = fetchTasksTC(props.id)\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const addTask = useCallback((title: string) => {\r\n        props.addTask(title, props.id)\r\n    }, [props.addTask, props.id])\r\n\r\n    const removeTodolist = () => {\r\n        props.removeTodolist(props.id)\r\n    }\r\n    const changeTodolistTitle = useCallback((title: string) => {\r\n        props.changeTodolistTitle(props.id, title)\r\n    }, [props.id, props.changeTodolistTitle])\r\n\r\n    const onAllClickHandler = useCallback(() => props.changeFilter('all', props.id), [props.id, props.changeFilter])\r\n    const onActiveClickHandler = useCallback(() => props.changeFilter('active', props.id), [props.id, props.changeFilter])\r\n    const onCompletedClickHandler = useCallback(() => props.changeFilter('completed', props.id), [props.id, props.changeFilter])\r\n\r\n\r\n    let tasksForTodolist = props.tasks\r\n\r\n    if (props.filter === 'active') {\r\n        tasksForTodolist = props.tasks.filter(t => t.status === TaskStatuses.New)\r\n    }\r\n    if (props.filter === 'completed') {\r\n        tasksForTodolist = props.tasks.filter(t => t.status === TaskStatuses.Completed)\r\n    }\r\n\r\n    return <div>\r\n        <h3><EditableSpan value={props.title} onChange={changeTodolistTitle}/>\r\n            <IconButton onClick={removeTodolist}>\r\n                <Delete/>\r\n            </IconButton>\r\n        </h3>\r\n        <AddItemForm addItem={addTask}/>\r\n        <div>\r\n            {\r\n                tasksForTodolist.map(t => <Task key={t.id} task={t} todolistId={props.id}\r\n                                                removeTask={props.removeTask}\r\n                                                changeTaskTitle={props.changeTaskTitle}\r\n                                                changeTaskStatus={props.changeTaskStatus}\r\n                />)\r\n            }\r\n        </div>\r\n        <div style={{paddingTop: '10px'}}>\r\n            <Button variant={props.filter === 'all' ? 'outlined' : 'text'}\r\n                    onClick={onAllClickHandler}\r\n                    color={'inherit'}\r\n            >Все\r\n            </Button>\r\n            <Button variant={props.filter === 'active' ? 'outlined' : 'text'}\r\n                    onClick={onActiveClickHandler}\r\n                    color={'primary'}>Активные\r\n            </Button>\r\n            <Button variant={props.filter === 'completed' ? 'outlined' : 'text'}\r\n                    onClick={onCompletedClickHandler}\r\n                    color={'secondary'}>Выполненые\r\n            </Button>\r\n        </div>\r\n    </div>\r\n})\r\n\r\n\r\n","import React, {useCallback, useEffect} from 'react'\r\nimport {useDispatch, useSelector} from 'react-redux'\r\nimport {AppRootStateType} from '../../app/store'\r\nimport {\r\n    addTodolistTC,\r\n    changeTodolistFilterAC,\r\n    changeTodolistTitleTC,\r\n    fetchTodolistsTC,\r\n    FilterValuesType,\r\n    removeTodolistTC,\r\n    TodolistDomainType\r\n} from './todolists-reducer'\r\nimport {addTaskTC, removeTaskTC, TasksStateType, updateTaskTC} from './tasks-reducer'\r\nimport {TaskStatuses} from '../../api/todolists-api'\r\nimport {AddItemForm} from '../../components/AddItemForm/AddItemForm'\r\nimport {Todolist} from './Todolist/Todolist'\r\nimport Grid from '@mui/material/Grid';\r\nimport Paper from '@mui/material/Paper';\r\n\r\n\r\nexport const TodolistsList: React.FC = () => {\r\n\r\n    const todolists = useSelector<AppRootStateType, Array<TodolistDomainType>>(state => state.todolists)\r\n    const tasks = useSelector<AppRootStateType, TasksStateType>(state => state.tasks)\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    useEffect(() => {\r\n        const thunk = fetchTodolistsTC()\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const removeTask = useCallback(function (id: string, todolistId: string) {\r\n        const thunk = removeTaskTC(id, todolistId)\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const addTask = useCallback(function (title: string, todolistId: string) {\r\n        const thunk = addTaskTC(title, todolistId)\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const changeStatus = useCallback(function (id: string, status: TaskStatuses, todolistId: string) {\r\n        const thunk = updateTaskTC(id, {status}, todolistId)\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const changeTaskTitle = useCallback(function (id: string, newTitle: string, todolistId: string) {\r\n        const thunk = updateTaskTC(id, {title: newTitle}, todolistId)\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const changeFilter = useCallback(function (value: FilterValuesType, todolistId: string) {\r\n        const action = changeTodolistFilterAC(todolistId, value)\r\n        dispatch(action)\r\n    }, [])\r\n\r\n    const removeTodolist = useCallback(function (id: string) {\r\n        const thunk = removeTodolistTC(id)\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const changeTodolistTitle = useCallback(function (id: string, title: string) {\r\n        const thunk = changeTodolistTitleTC(id, title)\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const addTodolist = useCallback((title: string) => {\r\n        const thunk = addTodolistTC(title)\r\n        dispatch(thunk)\r\n    }, [dispatch])\r\n\r\n\r\n    return <>\r\n        <Grid container style={{padding: '20px'}}>\r\n            <AddItemForm addItem={addTodolist}/>\r\n        </Grid>\r\n        <Grid container spacing={3}>\r\n            {\r\n                todolists.map(tl => {\r\n                    let allTodolistTasks = tasks[tl.id]\r\n\r\n                    return <Grid item key={tl.id}>\r\n                        <Paper style={{padding: '10px'}}>\r\n                            <Todolist\r\n                                id={tl.id}\r\n                                title={tl.title}\r\n                                tasks={allTodolistTasks}\r\n                                removeTask={removeTask}\r\n                                changeFilter={changeFilter}\r\n                                addTask={addTask}\r\n                                changeTaskStatus={changeStatus}\r\n                                filter={tl.filter}\r\n                                removeTodolist={removeTodolist}\r\n                                changeTaskTitle={changeTaskTitle}\r\n                                changeTodolistTitle={changeTodolistTitle}\r\n                            />\r\n                        </Paper>\r\n                    </Grid>\r\n                })\r\n            }\r\n        </Grid>\r\n    </>\r\n}\r\n","import React from 'react';\nimport Snackbar from '@mui/material/Snackbar';\nimport MuiAlert, {AlertProps} from '@mui/material/Alert';\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {AppRootStateType} from \"../../app/store\";\nimport {setAppErrorAC} from \"../../app/app-reducer\";\n\n\nconst Alert = React.forwardRef<HTMLDivElement, AlertProps>(function Alert(\n    props, ref) {\n    return <MuiAlert elevation={6} ref={ref} variant=\"filled\" {...props} />;\n});\n\nexport function ErrorSnackbar() {\n    const error = useSelector<AppRootStateType, string | null>(state => state.app.error)\n    const dispatch = useDispatch()\n\n    const handleClose = (event?: React.SyntheticEvent, reason?: string) => {\n        if (reason === 'clickaway') {\n            return;\n        }\n        dispatch(setAppErrorAC(null))\n    };\n\n    return (\n        <Snackbar open={error === null} autoHideDuration={6000} onClose={handleClose}>\n            <Alert onClose={handleClose} severity=\"error\" sx={{width: '100%'}}>\n                {error}\n            </Alert>\n        </Snackbar>\n    );\n}\n","export const headerBtn = {\n    borderRadius: 5,\n    border: '2px solid white',\n    padding: 5,\n}\n\nexport const headerTitle = {\n    justifyContent: 'space-between',\n}","import React from 'react'\r\nimport './App.css'\r\nimport {TodolistsList} from '../features/TodolistsList/TodolistsList'\r\nimport AppBar from '@mui/material/AppBar';\r\nimport Toolbar from '@mui/material/Toolbar';\r\nimport IconButton from '@mui/material/IconButton';\r\nimport Typography from '@mui/material/Typography';\r\nimport Button from '@mui/material/Button';\r\nimport Container from '@mui/material/Container';\r\nimport {Menu} from '@mui/icons-material';\r\nimport LinearProgress from \"@mui/material/LinearProgress\";\r\nimport {AppRootStateType} from \"./store\";\r\nimport {RequestStatusType} from \"./app-reducer\";\r\nimport {useSelector} from \"react-redux\";\r\nimport {ErrorSnackbar} from \"../components/ErrorSnackbar/ErrorSnackbar\";\r\nimport {headerBtn, headerTitle} from \"./styles\";\r\n\r\n\r\nfunction App() {\r\n    const status = useSelector<AppRootStateType, RequestStatusType>((state) => state.app.status)\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            <AppBar position=\"static\">\r\n                <Toolbar style={headerTitle}>\r\n                    <IconButton edge=\"start\" color=\"inherit\" aria-label=\"menu\">\r\n                        <Menu/>\r\n                    </IconButton>\r\n                    <Typography variant=\"h6\">\r\n                        Списки\r\n                    </Typography>\r\n                    <Button color=\"inherit\" style={headerBtn}>Войти</Button>\r\n                </Toolbar>\r\n            </AppBar>\r\n            {status === 'loading' && <LinearProgress color=\"success\"/>}\r\n            <Container fixed>\r\n                <TodolistsList/>\r\n            </Container>\r\n            <ErrorSnackbar/>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default App\r\n","import {tasksReducer} from '../features/TodolistsList/tasks-reducer';\r\nimport {todolistsReducer} from '../features/TodolistsList/todolists-reducer';\r\nimport {applyMiddleware, combineReducers, createStore} from 'redux'\r\nimport thunkMiddleware from 'redux-thunk'\r\nimport {appReducer} from \"./app-reducer\";\r\n\r\n// объединяя reducer-ы с помощью combineReducers,\r\n// мы задаём структуру нашего единственного объекта-состояния\r\nconst rootReducer = combineReducers({\r\n    tasks: tasksReducer,\r\n    todolists: todolistsReducer,\r\n    app: appReducer,\r\n})\r\n// непосредственно создаём store\r\nexport const store = createStore(rootReducer, applyMiddleware(thunkMiddleware));\r\n// определить автоматически тип всего объекта состояния\r\nexport type AppRootStateType = ReturnType<typeof rootReducer>\r\n\r\n// а это, чтобы можно было в консоли браузера обращаться к store в любой момент\r\n// @ts-ignore\r\nwindow.store = store;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './app/App';\r\nimport {Provider} from 'react-redux';\r\nimport {store} from './app/store';\r\n\r\nReactDOM.render(\r\n    <React.StrictMode>\r\n        <Provider store={store}>\r\n            <App/>\r\n        </Provider>\r\n    </React.StrictMode>,\r\n    document.getElementById('root')\r\n);\r\n"],"sourceRoot":""}