{"version":3,"sources":["redux/actions.ts","components/CurrencyExchange/CurrencyExchange.tsx","redux/selectors.ts","containers/CurrencyExchangeContainer/CurrencyEContainer.tsx","components/App/App.tsx","redux/currencyReducer.ts","redux/state.ts","index.tsx"],"names":["ACTIONS_TYPE","CurrencyExchange","currenciesName","currentCurrency","currencyRate","isBuying","amountOfRUR","amountOfCurrency","changeCurrencyField","changeAction","changeCurrentCurrency","viewCurrency","value","data-currency","onChange","className","map","currency","index","onClick","data-action","ChangeCurrencyFieldAC","type","CHANGE_CURRENCY_FIELD_TYPE","payload","ChangeActionAC","CHANGE_CHANGE_ACTION","selectAllState","state","CurrencyEContainer","dispatch","useDispatch","useSelector","currencies","currencyName","buyRate","sellRate","Fragment","e","currentTarget","isFinite","dataset","trigger","Number","toFixed","action","CHANGE_CURRENT_CURRENCY","ChangeCurrentCurrencyAC","App","initialState","reducers","combineReducers","store","createStore","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.5e04bc57.chunk.js","sourcesContent":["export enum ACTIONS_TYPE {\r\n    CHANGE_CURRENCY_FIELD_TYPE = 'CurrencyExchange/CHANGE_CURRENCY_FIELD_TYPE',\r\n    CHANGE_CHANGE_ACTION = 'CurrencyExchange/CHANGE_CHANGE_ACTION',\r\n    CHANGE_CURRENT_CURRENCY = 'CurrencyExchange/CHANGE_CURRENT_CURRENCY',\r\n}\r\n\r\n\r\nexport type ChangeCurrencyFieldType = {\r\n    type: ACTIONS_TYPE.CHANGE_CURRENCY_FIELD_TYPE,\r\n    payload: {\r\n        amountOfRUR: string,\r\n        amountOfCurrency: string,\r\n    }\r\n};\r\n\r\nexport const ChangeCurrencyFieldAC = (amountOfRUR: string, amountOfCurrency: string): ChangeCurrencyFieldType => {\r\n    return {\r\n        type: ACTIONS_TYPE.CHANGE_CURRENCY_FIELD_TYPE,\r\n        payload: {amountOfRUR, amountOfCurrency},\r\n    };\r\n};\r\n\r\nexport type ChangeAction = {\r\n    type: ACTIONS_TYPE.CHANGE_CHANGE_ACTION,\r\n    payload: {\r\n        isBuying: boolean,\r\n        amountOfRUR: '',\r\n        amountOfCurrency: '',\r\n    },\r\n};\r\n\r\nexport const ChangeActionAC = (isBuying: boolean): ChangeAction => {\r\n    return {\r\n        type: ACTIONS_TYPE.CHANGE_CHANGE_ACTION,\r\n        payload: {\r\n            isBuying,\r\n            amountOfRUR: '',\r\n            amountOfCurrency: '',\r\n        },\r\n    };\r\n};\r\n\r\nexport type ChangeCurrentCurrencyType = {\r\n    type: ACTIONS_TYPE.CHANGE_CURRENT_CURRENCY,\r\n    payload: {\r\n        currentCurrency: string,\r\n        amountOfRUR: '',\r\n        amountOfCurrency: '',\r\n    }\r\n};\r\n\r\nexport const ChangeCurrentCurrencyAC = (currentCurrency: string): ChangeCurrentCurrencyType => {\r\n    return {\r\n        type: ACTIONS_TYPE.CHANGE_CURRENT_CURRENCY,\r\n        payload: {\r\n            currentCurrency,\r\n            amountOfRUR: '',\r\n            amountOfCurrency: '',\r\n        }\r\n    }\r\n};\r\n\r\nexport type CurrencyReducersTypes = ChangeCurrencyFieldType | ChangeAction | ChangeCurrentCurrencyType;","import React from 'react';\n\ntype CurrencyExchangePropsType = {\n    currenciesName: string[];\n    currentCurrency: string;\n    currencyRate: number;\n    isBuying: boolean;\n    amountOfRUR: string;\n    amountOfCurrency: string;\n    changeCurrencyField: (e: React.ChangeEvent<HTMLInputElement>) => void;\n    changeAction: (e: React.MouseEvent<HTMLSpanElement>) => void;\n    changeCurrentCurrency: (e: React.MouseEvent<HTMLLIElement>) => void;\n};\n\nconst CurrencyExchange: React.FC<CurrencyExchangePropsType> = ({\n                                                                   currenciesName,\n                                                                   currentCurrency,\n                                                                   currencyRate,\n                                                                   isBuying,\n                                                                   amountOfRUR,\n                                                                   amountOfCurrency,\n                                                                   changeCurrencyField,\n                                                                   changeAction,\n                                                                   changeCurrentCurrency,\n                                                               }) => {\n    const viewCurrency = isBuying ? (\n        <>\n            <label>\n                Введите сумму RUR:\n                <input value={amountOfRUR} data-currency=\"rur\" onChange={changeCurrencyField}/>\n            </label>\n            <label>\n                Вы получите {currentCurrency}:\n                <input value={amountOfCurrency} data-currency=\"currency\" onChange={changeCurrencyField}/>\n            </label>\n        </>\n    ) : (\n        <>\n            <label>\n                Введите сумму {currentCurrency}:\n                <input value={amountOfCurrency} data-currency=\"currency\" onChange={changeCurrencyField}/>\n            </label>\n            <label>\n                Вы получите RUR:\n                <input value={amountOfRUR} data-currency=\"rur\" onChange={changeCurrencyField}/>\n            </label>\n        </>\n    );\n\n    return (\n        <div className=\"currency\">\n            <h2>Конвертор валют</h2>\n            <div className=\"currency-names\">\n                <p>Выберите валюту: </p>\n                <ul>\n                    {currenciesName.map((currency: string, index: number) => {\n                        return (\n                            <li\n                                key={`${index}-${currency}`}\n                                className={`currencies ${currentCurrency === currency ? 'activeCurrency' : null}`}\n                                onClick={changeCurrentCurrency}\n                                data-currency={currency}\n                            >\n                                {currency}\n                            </li>\n                        );\n                    })}\n                </ul>\n            </div>\n            <div className=\"currency-action\">\n        <span className={isBuying ? 'active' : ''} data-action=\"buy\" onClick={changeAction}>\n          Купить\n        </span>\n                <span className={isBuying ? '' : 'active'} data-action=\"sell\" onClick={changeAction}>\n          Продать\n        </span>\n            </div>\n            <div className=\"fields\">\n                <p>Текущий курс: {currencyRate}</p>\n                {viewCurrency}\n            </div>\n        </div>\n    );\n};\n\nexport default CurrencyExchange;\n","import {IGlobalState} from './state'\r\n\r\n\r\nexport const selectAllState = (state: IGlobalState) => state.currency;","import React from 'react';\r\nimport CurrencyExchange from '../../components/CurrencyExchange/CurrencyExchange';\r\nimport {CurrencyType} from '../../redux/currencyReducer';\r\nimport {Dispatch} from 'redux';\r\nimport {\r\n    ChangeActionAC, ChangeCurrencyFieldAC, ChangeCurrentCurrencyAC, CurrencyReducersTypes\r\n} from '../../redux/actions';\r\nimport {useDispatch, useSelector} from 'react-redux';\r\nimport {selectAllState} from '../../redux/selectors';\r\n\r\nconst CurrencyEContainer: React.FC = () => {\r\n\r\n    const dispatch = useDispatch<Dispatch<CurrencyReducersTypes>>();\r\n\r\n    const {\r\n        currencies,\r\n        currentCurrency,\r\n        isBuying,\r\n        amountOfRUR,\r\n        amountOfCurrency,\r\n    } = useSelector(selectAllState);\r\n\r\n\r\n    let currencyRate: number = 0;\r\n    const currenciesName = currencies.map((currency: CurrencyType) => {\r\n        if (currency.currencyName === currentCurrency) {\r\n            currencyRate = isBuying ? currency.buyRate : currency.sellRate;\r\n        }\r\n        return currency.currencyName;\r\n    });\r\n\r\n    const changeCurrencyField = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n        let value = e.currentTarget.value;\r\n        if (!isFinite(+value)) return;\r\n        if (e.currentTarget.dataset.currency) {\r\n            const trigger: string = e.currentTarget.dataset.currency;\r\n            if (trigger === 'rur') {\r\n                if (value === '') {\r\n                    dispatch(ChangeCurrencyFieldAC(value, value));\r\n                } else {\r\n                    dispatch(ChangeCurrencyFieldAC(value, (+Number(value).toFixed(2) / currencyRate).toFixed(2)));\r\n                }\r\n            } else {\r\n                if (value === '') {\r\n                    dispatch(ChangeCurrencyFieldAC(value, value));\r\n                } else {\r\n                    dispatch(ChangeCurrencyFieldAC((+Number(value).toFixed(2) * currencyRate).toFixed(2), value));\r\n                }\r\n            }\r\n        }\r\n    };\r\n    const changeAction = (e: React.MouseEvent<HTMLSpanElement>) => {\r\n        e.currentTarget.dataset.action === 'buy' ? dispatch(ChangeActionAC(true)) : dispatch(ChangeActionAC(false));\r\n    };\r\n\r\n    const changeCurrentCurrency = (e: React.MouseEvent<HTMLLIElement>) => {\r\n        e.currentTarget.dataset.currency && dispatch(ChangeCurrentCurrencyAC(e.currentTarget.dataset.currency));\r\n    };\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <CurrencyExchange\r\n                currenciesName={currenciesName}\r\n                currentCurrency={currentCurrency}\r\n                currencyRate={currencyRate}\r\n                isBuying={isBuying}\r\n                amountOfRUR={amountOfRUR}\r\n                amountOfCurrency={amountOfCurrency}\r\n                changeCurrencyField={changeCurrencyField}\r\n                changeAction={changeAction}\r\n                changeCurrentCurrency={changeCurrentCurrency}\r\n            />\r\n        </React.Fragment>\r\n    );\r\n};\r\n\r\nexport default CurrencyEContainer;\r\n","import React from 'react';\nimport './App.css';\nimport CurrencyEContainer from \"../../containers/CurrencyExchangeContainer/CurrencyEContainer\";\n\n\nfunction App() {\n    return (\n        <div className=\"container\">\n            <CurrencyEContainer/>\n        </div>\n    );\n}\n\nexport default App;\n","import {ACTIONS_TYPE, CurrencyReducersTypes} from './actions';\r\n\r\n\r\nexport type CurrencyType = {\r\n    currencyName: string;\r\n    buyRate: number;\r\n    sellRate: number;\r\n};\r\nexport type CurrencyState = {\r\n    currencies: Array<CurrencyType>;\r\n    currentCurrency: string;\r\n    isBuying: boolean;\r\n    amountOfRUR: string;\r\n    amountOfCurrency: string;\r\n};\r\n\r\nconst initialState: CurrencyState = {\r\n    currencies: [\r\n        {\r\n            currencyName: 'USD',\r\n            buyRate: 73.62,\r\n            sellRate: 72.48,\r\n        },\r\n        {\r\n            currencyName: 'EUR',\r\n            buyRate: 86.52,\r\n            sellRate: 85.16,\r\n        },\r\n        {\r\n            currencyName: 'GBP',\r\n            buyRate: 102.45,\r\n            sellRate: 101.03,\r\n        },\r\n    ],\r\n    currentCurrency: 'USD',\r\n    isBuying: true,\r\n    amountOfRUR: '',\r\n    amountOfCurrency: '',\r\n};\r\n\r\nexport const currencyReducer = (state: CurrencyState = initialState, action: CurrencyReducersTypes): CurrencyState => {\r\n    switch (action.type) {\r\n        case ACTIONS_TYPE.CHANGE_CURRENCY_FIELD_TYPE:\r\n        case ACTIONS_TYPE.CHANGE_CHANGE_ACTION:\r\n        case ACTIONS_TYPE.CHANGE_CURRENT_CURRENCY:\r\n            return {\r\n                ...state,\r\n                ...action.payload,\r\n            }\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n","import {combineReducers, createStore} from \"redux\";\r\nimport {currencyReducer} from './currencyReducer';\r\n\r\n\r\nconst reducers = combineReducers({\r\n    currency: currencyReducer,\r\n});\r\nexport type IGlobalState = ReturnType<typeof reducers>;\r\n\r\nexport const store = createStore(reducers);","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App/App';\nimport {Provider} from 'react-redux';\nimport {store} from './redux/state';\n\n\nReactDOM.render(\n    <Provider store={store}>\n        <App/>\n    </Provider>,\n    document.getElementById('root')\n);\n"],"sourceRoot":""}